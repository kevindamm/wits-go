// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/osnmap"
	"github.com/kevindamm/wits-go/ent/playerrole"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetSeason sets the "season" field.
func (mu *MatchUpdate) SetSeason(i int8) *MatchUpdate {
	mu.mutation.ResetSeason()
	mu.mutation.SetSeason(i)
	return mu
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableSeason(i *int8) *MatchUpdate {
	if i != nil {
		mu.SetSeason(*i)
	}
	return mu
}

// AddSeason adds i to the "season" field.
func (mu *MatchUpdate) AddSeason(i int8) *MatchUpdate {
	mu.mutation.AddSeason(i)
	return mu
}

// SetCreatedTs sets the "created_ts" field.
func (mu *MatchUpdate) SetCreatedTs(t time.Time) *MatchUpdate {
	mu.mutation.SetCreatedTs(t)
	return mu
}

// SetNillableCreatedTs sets the "created_ts" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableCreatedTs(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetCreatedTs(*t)
	}
	return mu
}

// SetTurnCount sets the "turn_count" field.
func (mu *MatchUpdate) SetTurnCount(i int) *MatchUpdate {
	mu.mutation.ResetTurnCount()
	mu.mutation.SetTurnCount(i)
	return mu
}

// SetNillableTurnCount sets the "turn_count" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableTurnCount(i *int) *MatchUpdate {
	if i != nil {
		mu.SetTurnCount(*i)
	}
	return mu
}

// AddTurnCount adds i to the "turn_count" field.
func (mu *MatchUpdate) AddTurnCount(i int) *MatchUpdate {
	mu.mutation.AddTurnCount(i)
	return mu
}

// SetFetchStatus sets the "fetch_status" field.
func (mu *MatchUpdate) SetFetchStatus(ms match.FetchStatus) *MatchUpdate {
	mu.mutation.SetFetchStatus(ms)
	return mu
}

// SetNillableFetchStatus sets the "fetch_status" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableFetchStatus(ms *match.FetchStatus) *MatchUpdate {
	if ms != nil {
		mu.SetFetchStatus(*ms)
	}
	return mu
}

// SetMapID sets the "map" edge to the OsnMap entity by ID.
func (mu *MatchUpdate) SetMapID(id int) *MatchUpdate {
	mu.mutation.SetMapID(id)
	return mu
}

// SetNillableMapID sets the "map" edge to the OsnMap entity by ID if the given value is not nil.
func (mu *MatchUpdate) SetNillableMapID(id *int) *MatchUpdate {
	if id != nil {
		mu = mu.SetMapID(*id)
	}
	return mu
}

// SetMap sets the "map" edge to the OsnMap entity.
func (mu *MatchUpdate) SetMap(o *OsnMap) *MatchUpdate {
	return mu.SetMapID(o.ID)
}

// AddRoleIDs adds the "roles" edge to the PlayerRole entity by IDs.
func (mu *MatchUpdate) AddRoleIDs(ids ...int) *MatchUpdate {
	mu.mutation.AddRoleIDs(ids...)
	return mu
}

// AddRoles adds the "roles" edges to the PlayerRole entity.
func (mu *MatchUpdate) AddRoles(p ...*PlayerRole) *MatchUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddRoleIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearMap clears the "map" edge to the OsnMap entity.
func (mu *MatchUpdate) ClearMap() *MatchUpdate {
	mu.mutation.ClearMap()
	return mu
}

// ClearRoles clears all "roles" edges to the PlayerRole entity.
func (mu *MatchUpdate) ClearRoles() *MatchUpdate {
	mu.mutation.ClearRoles()
	return mu
}

// RemoveRoleIDs removes the "roles" edge to PlayerRole entities by IDs.
func (mu *MatchUpdate) RemoveRoleIDs(ids ...int) *MatchUpdate {
	mu.mutation.RemoveRoleIDs(ids...)
	return mu
}

// RemoveRoles removes "roles" edges to PlayerRole entities.
func (mu *MatchUpdate) RemoveRoles(p ...*PlayerRole) *MatchUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MatchUpdate) check() error {
	if v, ok := mu.mutation.FetchStatus(); ok {
		if err := match.FetchStatusValidator(v); err != nil {
			return &ValidationError{Name: "fetch_status", err: fmt.Errorf(`ent: validator failed for field "Match.fetch_status": %w`, err)}
		}
	}
	return nil
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Season(); ok {
		_spec.SetField(match.FieldSeason, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.AddedSeason(); ok {
		_spec.AddField(match.FieldSeason, field.TypeInt8, value)
	}
	if value, ok := mu.mutation.CreatedTs(); ok {
		_spec.SetField(match.FieldCreatedTs, field.TypeTime, value)
	}
	if value, ok := mu.mutation.TurnCount(); ok {
		_spec.SetField(match.FieldTurnCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedTurnCount(); ok {
		_spec.AddField(match.FieldTurnCount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.FetchStatus(); ok {
		_spec.SetField(match.FieldFetchStatus, field.TypeEnum, value)
	}
	if mu.mutation.MapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.MapTable,
			Columns: []string{match.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.MapTable,
			Columns: []string{match.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.RolesTable,
			Columns: match.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.RolesTable,
			Columns: match.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.RolesTable,
			Columns: match.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetSeason sets the "season" field.
func (muo *MatchUpdateOne) SetSeason(i int8) *MatchUpdateOne {
	muo.mutation.ResetSeason()
	muo.mutation.SetSeason(i)
	return muo
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableSeason(i *int8) *MatchUpdateOne {
	if i != nil {
		muo.SetSeason(*i)
	}
	return muo
}

// AddSeason adds i to the "season" field.
func (muo *MatchUpdateOne) AddSeason(i int8) *MatchUpdateOne {
	muo.mutation.AddSeason(i)
	return muo
}

// SetCreatedTs sets the "created_ts" field.
func (muo *MatchUpdateOne) SetCreatedTs(t time.Time) *MatchUpdateOne {
	muo.mutation.SetCreatedTs(t)
	return muo
}

// SetNillableCreatedTs sets the "created_ts" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableCreatedTs(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetCreatedTs(*t)
	}
	return muo
}

// SetTurnCount sets the "turn_count" field.
func (muo *MatchUpdateOne) SetTurnCount(i int) *MatchUpdateOne {
	muo.mutation.ResetTurnCount()
	muo.mutation.SetTurnCount(i)
	return muo
}

// SetNillableTurnCount sets the "turn_count" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableTurnCount(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetTurnCount(*i)
	}
	return muo
}

// AddTurnCount adds i to the "turn_count" field.
func (muo *MatchUpdateOne) AddTurnCount(i int) *MatchUpdateOne {
	muo.mutation.AddTurnCount(i)
	return muo
}

// SetFetchStatus sets the "fetch_status" field.
func (muo *MatchUpdateOne) SetFetchStatus(ms match.FetchStatus) *MatchUpdateOne {
	muo.mutation.SetFetchStatus(ms)
	return muo
}

// SetNillableFetchStatus sets the "fetch_status" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableFetchStatus(ms *match.FetchStatus) *MatchUpdateOne {
	if ms != nil {
		muo.SetFetchStatus(*ms)
	}
	return muo
}

// SetMapID sets the "map" edge to the OsnMap entity by ID.
func (muo *MatchUpdateOne) SetMapID(id int) *MatchUpdateOne {
	muo.mutation.SetMapID(id)
	return muo
}

// SetNillableMapID sets the "map" edge to the OsnMap entity by ID if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableMapID(id *int) *MatchUpdateOne {
	if id != nil {
		muo = muo.SetMapID(*id)
	}
	return muo
}

// SetMap sets the "map" edge to the OsnMap entity.
func (muo *MatchUpdateOne) SetMap(o *OsnMap) *MatchUpdateOne {
	return muo.SetMapID(o.ID)
}

// AddRoleIDs adds the "roles" edge to the PlayerRole entity by IDs.
func (muo *MatchUpdateOne) AddRoleIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.AddRoleIDs(ids...)
	return muo
}

// AddRoles adds the "roles" edges to the PlayerRole entity.
func (muo *MatchUpdateOne) AddRoles(p ...*PlayerRole) *MatchUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddRoleIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearMap clears the "map" edge to the OsnMap entity.
func (muo *MatchUpdateOne) ClearMap() *MatchUpdateOne {
	muo.mutation.ClearMap()
	return muo
}

// ClearRoles clears all "roles" edges to the PlayerRole entity.
func (muo *MatchUpdateOne) ClearRoles() *MatchUpdateOne {
	muo.mutation.ClearRoles()
	return muo
}

// RemoveRoleIDs removes the "roles" edge to PlayerRole entities by IDs.
func (muo *MatchUpdateOne) RemoveRoleIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.RemoveRoleIDs(ids...)
	return muo
}

// RemoveRoles removes "roles" edges to PlayerRole entities.
func (muo *MatchUpdateOne) RemoveRoles(p ...*PlayerRole) *MatchUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MatchUpdateOne) check() error {
	if v, ok := muo.mutation.FetchStatus(); ok {
		if err := match.FetchStatusValidator(v); err != nil {
			return &ValidationError{Name: "fetch_status", err: fmt.Errorf(`ent: validator failed for field "Match.fetch_status": %w`, err)}
		}
	}
	return nil
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Season(); ok {
		_spec.SetField(match.FieldSeason, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.AddedSeason(); ok {
		_spec.AddField(match.FieldSeason, field.TypeInt8, value)
	}
	if value, ok := muo.mutation.CreatedTs(); ok {
		_spec.SetField(match.FieldCreatedTs, field.TypeTime, value)
	}
	if value, ok := muo.mutation.TurnCount(); ok {
		_spec.SetField(match.FieldTurnCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedTurnCount(); ok {
		_spec.AddField(match.FieldTurnCount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.FetchStatus(); ok {
		_spec.SetField(match.FieldFetchStatus, field.TypeEnum, value)
	}
	if muo.mutation.MapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.MapTable,
			Columns: []string{match.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.MapTable,
			Columns: []string{match.MapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.RolesTable,
			Columns: match.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.RolesTable,
			Columns: match.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.RolesTable,
			Columns: match.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
