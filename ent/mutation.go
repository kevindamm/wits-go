// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/osnmap"
	"github.com/kevindamm/wits-go/ent/player"
	"github.com/kevindamm/wits-go/ent/playerrole"
	"github.com/kevindamm/wits-go/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMatch      = "Match"
	TypeOsnMap     = "OsnMap"
	TypePlayer     = "Player"
	TypePlayerRole = "PlayerRole"
)

// MatchMutation represents an operation that mutates the Match nodes in the graph.
type MatchMutation struct {
	config
	op            Op
	typ           string
	id            *int
	match_hash    *string
	version       *int
	addversion    *int
	season        *int8
	addseason     *int8
	created_ts    *time.Time
	turn_count    *int
	addturn_count *int
	fetch_status  *match.FetchStatus
	clearedFields map[string]struct{}
	_map          *int
	cleared_map   bool
	roles         map[int]struct{}
	removedroles  map[int]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*Match, error)
	predicates    []predicate.Match
}

var _ ent.Mutation = (*MatchMutation)(nil)

// matchOption allows management of the mutation configuration using functional options.
type matchOption func(*MatchMutation)

// newMatchMutation creates new mutation for the Match entity.
func newMatchMutation(c config, op Op, opts ...matchOption) *MatchMutation {
	m := &MatchMutation{
		config:        c,
		op:            op,
		typ:           TypeMatch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMatchID sets the ID field of the mutation.
func withMatchID(id int) matchOption {
	return func(m *MatchMutation) {
		var (
			err   error
			once  sync.Once
			value *Match
		)
		m.oldValue = func(ctx context.Context) (*Match, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Match.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMatch sets the old Match of the mutation.
func withMatch(node *Match) matchOption {
	return func(m *MatchMutation) {
		m.oldValue = func(context.Context) (*Match, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MatchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MatchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MatchMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MatchMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Match.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMatchHash sets the "match_hash" field.
func (m *MatchMutation) SetMatchHash(s string) {
	m.match_hash = &s
}

// MatchHash returns the value of the "match_hash" field in the mutation.
func (m *MatchMutation) MatchHash() (r string, exists bool) {
	v := m.match_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldMatchHash returns the old "match_hash" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldMatchHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMatchHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMatchHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMatchHash: %w", err)
	}
	return oldValue.MatchHash, nil
}

// ResetMatchHash resets all changes to the "match_hash" field.
func (m *MatchMutation) ResetMatchHash() {
	m.match_hash = nil
}

// SetVersion sets the "version" field.
func (m *MatchMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *MatchMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *MatchMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *MatchMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *MatchMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetSeason sets the "season" field.
func (m *MatchMutation) SetSeason(i int8) {
	m.season = &i
	m.addseason = nil
}

// Season returns the value of the "season" field in the mutation.
func (m *MatchMutation) Season() (r int8, exists bool) {
	v := m.season
	if v == nil {
		return
	}
	return *v, true
}

// OldSeason returns the old "season" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldSeason(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeason: %w", err)
	}
	return oldValue.Season, nil
}

// AddSeason adds i to the "season" field.
func (m *MatchMutation) AddSeason(i int8) {
	if m.addseason != nil {
		*m.addseason += i
	} else {
		m.addseason = &i
	}
}

// AddedSeason returns the value that was added to the "season" field in this mutation.
func (m *MatchMutation) AddedSeason() (r int8, exists bool) {
	v := m.addseason
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeason resets all changes to the "season" field.
func (m *MatchMutation) ResetSeason() {
	m.season = nil
	m.addseason = nil
}

// SetCreatedTs sets the "created_ts" field.
func (m *MatchMutation) SetCreatedTs(t time.Time) {
	m.created_ts = &t
}

// CreatedTs returns the value of the "created_ts" field in the mutation.
func (m *MatchMutation) CreatedTs() (r time.Time, exists bool) {
	v := m.created_ts
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTs returns the old "created_ts" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldCreatedTs(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTs: %w", err)
	}
	return oldValue.CreatedTs, nil
}

// ResetCreatedTs resets all changes to the "created_ts" field.
func (m *MatchMutation) ResetCreatedTs() {
	m.created_ts = nil
}

// SetTurnCount sets the "turn_count" field.
func (m *MatchMutation) SetTurnCount(i int) {
	m.turn_count = &i
	m.addturn_count = nil
}

// TurnCount returns the value of the "turn_count" field in the mutation.
func (m *MatchMutation) TurnCount() (r int, exists bool) {
	v := m.turn_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTurnCount returns the old "turn_count" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldTurnCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTurnCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTurnCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTurnCount: %w", err)
	}
	return oldValue.TurnCount, nil
}

// AddTurnCount adds i to the "turn_count" field.
func (m *MatchMutation) AddTurnCount(i int) {
	if m.addturn_count != nil {
		*m.addturn_count += i
	} else {
		m.addturn_count = &i
	}
}

// AddedTurnCount returns the value that was added to the "turn_count" field in this mutation.
func (m *MatchMutation) AddedTurnCount() (r int, exists bool) {
	v := m.addturn_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetTurnCount resets all changes to the "turn_count" field.
func (m *MatchMutation) ResetTurnCount() {
	m.turn_count = nil
	m.addturn_count = nil
}

// SetFetchStatus sets the "fetch_status" field.
func (m *MatchMutation) SetFetchStatus(ms match.FetchStatus) {
	m.fetch_status = &ms
}

// FetchStatus returns the value of the "fetch_status" field in the mutation.
func (m *MatchMutation) FetchStatus() (r match.FetchStatus, exists bool) {
	v := m.fetch_status
	if v == nil {
		return
	}
	return *v, true
}

// OldFetchStatus returns the old "fetch_status" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldFetchStatus(ctx context.Context) (v *match.FetchStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFetchStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFetchStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFetchStatus: %w", err)
	}
	return oldValue.FetchStatus, nil
}

// ResetFetchStatus resets all changes to the "fetch_status" field.
func (m *MatchMutation) ResetFetchStatus() {
	m.fetch_status = nil
}

// SetMapID sets the "map" edge to the OsnMap entity by id.
func (m *MatchMutation) SetMapID(id int) {
	m._map = &id
}

// ClearMap clears the "map" edge to the OsnMap entity.
func (m *MatchMutation) ClearMap() {
	m.cleared_map = true
}

// MapCleared reports if the "map" edge to the OsnMap entity was cleared.
func (m *MatchMutation) MapCleared() bool {
	return m.cleared_map
}

// MapID returns the "map" edge ID in the mutation.
func (m *MatchMutation) MapID() (id int, exists bool) {
	if m._map != nil {
		return *m._map, true
	}
	return
}

// MapIDs returns the "map" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MapID instead. It exists only for internal usage by the builders.
func (m *MatchMutation) MapIDs() (ids []int) {
	if id := m._map; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMap resets all changes to the "map" edge.
func (m *MatchMutation) ResetMap() {
	m._map = nil
	m.cleared_map = false
}

// AddRoleIDs adds the "roles" edge to the PlayerRole entity by ids.
func (m *MatchMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the PlayerRole entity.
func (m *MatchMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the PlayerRole entity was cleared.
func (m *MatchMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the PlayerRole entity by IDs.
func (m *MatchMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the PlayerRole entity.
func (m *MatchMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *MatchMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *MatchMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the MatchMutation builder.
func (m *MatchMutation) Where(ps ...predicate.Match) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MatchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MatchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Match, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MatchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MatchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Match).
func (m *MatchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MatchMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.match_hash != nil {
		fields = append(fields, match.FieldMatchHash)
	}
	if m.version != nil {
		fields = append(fields, match.FieldVersion)
	}
	if m.season != nil {
		fields = append(fields, match.FieldSeason)
	}
	if m.created_ts != nil {
		fields = append(fields, match.FieldCreatedTs)
	}
	if m.turn_count != nil {
		fields = append(fields, match.FieldTurnCount)
	}
	if m.fetch_status != nil {
		fields = append(fields, match.FieldFetchStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MatchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case match.FieldMatchHash:
		return m.MatchHash()
	case match.FieldVersion:
		return m.Version()
	case match.FieldSeason:
		return m.Season()
	case match.FieldCreatedTs:
		return m.CreatedTs()
	case match.FieldTurnCount:
		return m.TurnCount()
	case match.FieldFetchStatus:
		return m.FetchStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MatchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case match.FieldMatchHash:
		return m.OldMatchHash(ctx)
	case match.FieldVersion:
		return m.OldVersion(ctx)
	case match.FieldSeason:
		return m.OldSeason(ctx)
	case match.FieldCreatedTs:
		return m.OldCreatedTs(ctx)
	case match.FieldTurnCount:
		return m.OldTurnCount(ctx)
	case match.FieldFetchStatus:
		return m.OldFetchStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Match field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MatchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case match.FieldMatchHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMatchHash(v)
		return nil
	case match.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case match.FieldSeason:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeason(v)
		return nil
	case match.FieldCreatedTs:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTs(v)
		return nil
	case match.FieldTurnCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTurnCount(v)
		return nil
	case match.FieldFetchStatus:
		v, ok := value.(match.FetchStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFetchStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Match field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MatchMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, match.FieldVersion)
	}
	if m.addseason != nil {
		fields = append(fields, match.FieldSeason)
	}
	if m.addturn_count != nil {
		fields = append(fields, match.FieldTurnCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MatchMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case match.FieldVersion:
		return m.AddedVersion()
	case match.FieldSeason:
		return m.AddedSeason()
	case match.FieldTurnCount:
		return m.AddedTurnCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MatchMutation) AddField(name string, value ent.Value) error {
	switch name {
	case match.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	case match.FieldSeason:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeason(v)
		return nil
	case match.FieldTurnCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTurnCount(v)
		return nil
	}
	return fmt.Errorf("unknown Match numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MatchMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MatchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MatchMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Match nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MatchMutation) ResetField(name string) error {
	switch name {
	case match.FieldMatchHash:
		m.ResetMatchHash()
		return nil
	case match.FieldVersion:
		m.ResetVersion()
		return nil
	case match.FieldSeason:
		m.ResetSeason()
		return nil
	case match.FieldCreatedTs:
		m.ResetCreatedTs()
		return nil
	case match.FieldTurnCount:
		m.ResetTurnCount()
		return nil
	case match.FieldFetchStatus:
		m.ResetFetchStatus()
		return nil
	}
	return fmt.Errorf("unknown Match field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MatchMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._map != nil {
		edges = append(edges, match.EdgeMap)
	}
	if m.roles != nil {
		edges = append(edges, match.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MatchMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case match.EdgeMap:
		if id := m._map; id != nil {
			return []ent.Value{*id}
		}
	case match.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MatchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroles != nil {
		edges = append(edges, match.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MatchMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case match.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MatchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_map {
		edges = append(edges, match.EdgeMap)
	}
	if m.clearedroles {
		edges = append(edges, match.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MatchMutation) EdgeCleared(name string) bool {
	switch name {
	case match.EdgeMap:
		return m.cleared_map
	case match.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MatchMutation) ClearEdge(name string) error {
	switch name {
	case match.EdgeMap:
		m.ClearMap()
		return nil
	}
	return fmt.Errorf("unknown Match unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MatchMutation) ResetEdge(name string) error {
	switch name {
	case match.EdgeMap:
		m.ResetMap()
		return nil
	case match.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Match edge %s", name)
}

// OsnMapMutation represents an operation that mutates the OsnMap nodes in the graph.
type OsnMapMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	shortname      *string
	role_count     *int
	addrole_count  *int
	clearedFields  map[string]struct{}
	matches        map[int]struct{}
	removedmatches map[int]struct{}
	clearedmatches bool
	done           bool
	oldValue       func(context.Context) (*OsnMap, error)
	predicates     []predicate.OsnMap
}

var _ ent.Mutation = (*OsnMapMutation)(nil)

// osnmapOption allows management of the mutation configuration using functional options.
type osnmapOption func(*OsnMapMutation)

// newOsnMapMutation creates new mutation for the OsnMap entity.
func newOsnMapMutation(c config, op Op, opts ...osnmapOption) *OsnMapMutation {
	m := &OsnMapMutation{
		config:        c,
		op:            op,
		typ:           TypeOsnMap,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOsnMapID sets the ID field of the mutation.
func withOsnMapID(id int) osnmapOption {
	return func(m *OsnMapMutation) {
		var (
			err   error
			once  sync.Once
			value *OsnMap
		)
		m.oldValue = func(ctx context.Context) (*OsnMap, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OsnMap.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOsnMap sets the old OsnMap of the mutation.
func withOsnMap(node *OsnMap) osnmapOption {
	return func(m *OsnMapMutation) {
		m.oldValue = func(context.Context) (*OsnMap, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OsnMapMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OsnMapMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OsnMapMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OsnMapMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OsnMap.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OsnMapMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OsnMapMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OsnMap entity.
// If the OsnMap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OsnMapMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OsnMapMutation) ResetName() {
	m.name = nil
}

// SetShortname sets the "shortname" field.
func (m *OsnMapMutation) SetShortname(s string) {
	m.shortname = &s
}

// Shortname returns the value of the "shortname" field in the mutation.
func (m *OsnMapMutation) Shortname() (r string, exists bool) {
	v := m.shortname
	if v == nil {
		return
	}
	return *v, true
}

// OldShortname returns the old "shortname" field's value of the OsnMap entity.
// If the OsnMap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OsnMapMutation) OldShortname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortname: %w", err)
	}
	return oldValue.Shortname, nil
}

// ResetShortname resets all changes to the "shortname" field.
func (m *OsnMapMutation) ResetShortname() {
	m.shortname = nil
}

// SetRoleCount sets the "role_count" field.
func (m *OsnMapMutation) SetRoleCount(i int) {
	m.role_count = &i
	m.addrole_count = nil
}

// RoleCount returns the value of the "role_count" field in the mutation.
func (m *OsnMapMutation) RoleCount() (r int, exists bool) {
	v := m.role_count
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleCount returns the old "role_count" field's value of the OsnMap entity.
// If the OsnMap object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OsnMapMutation) OldRoleCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleCount: %w", err)
	}
	return oldValue.RoleCount, nil
}

// AddRoleCount adds i to the "role_count" field.
func (m *OsnMapMutation) AddRoleCount(i int) {
	if m.addrole_count != nil {
		*m.addrole_count += i
	} else {
		m.addrole_count = &i
	}
}

// AddedRoleCount returns the value that was added to the "role_count" field in this mutation.
func (m *OsnMapMutation) AddedRoleCount() (r int, exists bool) {
	v := m.addrole_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleCount resets all changes to the "role_count" field.
func (m *OsnMapMutation) ResetRoleCount() {
	m.role_count = nil
	m.addrole_count = nil
}

// AddMatchIDs adds the "matches" edge to the Match entity by ids.
func (m *OsnMapMutation) AddMatchIDs(ids ...int) {
	if m.matches == nil {
		m.matches = make(map[int]struct{})
	}
	for i := range ids {
		m.matches[ids[i]] = struct{}{}
	}
}

// ClearMatches clears the "matches" edge to the Match entity.
func (m *OsnMapMutation) ClearMatches() {
	m.clearedmatches = true
}

// MatchesCleared reports if the "matches" edge to the Match entity was cleared.
func (m *OsnMapMutation) MatchesCleared() bool {
	return m.clearedmatches
}

// RemoveMatchIDs removes the "matches" edge to the Match entity by IDs.
func (m *OsnMapMutation) RemoveMatchIDs(ids ...int) {
	if m.removedmatches == nil {
		m.removedmatches = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.matches, ids[i])
		m.removedmatches[ids[i]] = struct{}{}
	}
}

// RemovedMatches returns the removed IDs of the "matches" edge to the Match entity.
func (m *OsnMapMutation) RemovedMatchesIDs() (ids []int) {
	for id := range m.removedmatches {
		ids = append(ids, id)
	}
	return
}

// MatchesIDs returns the "matches" edge IDs in the mutation.
func (m *OsnMapMutation) MatchesIDs() (ids []int) {
	for id := range m.matches {
		ids = append(ids, id)
	}
	return
}

// ResetMatches resets all changes to the "matches" edge.
func (m *OsnMapMutation) ResetMatches() {
	m.matches = nil
	m.clearedmatches = false
	m.removedmatches = nil
}

// Where appends a list predicates to the OsnMapMutation builder.
func (m *OsnMapMutation) Where(ps ...predicate.OsnMap) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OsnMapMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OsnMapMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OsnMap, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OsnMapMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OsnMapMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OsnMap).
func (m *OsnMapMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OsnMapMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, osnmap.FieldName)
	}
	if m.shortname != nil {
		fields = append(fields, osnmap.FieldShortname)
	}
	if m.role_count != nil {
		fields = append(fields, osnmap.FieldRoleCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OsnMapMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case osnmap.FieldName:
		return m.Name()
	case osnmap.FieldShortname:
		return m.Shortname()
	case osnmap.FieldRoleCount:
		return m.RoleCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OsnMapMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case osnmap.FieldName:
		return m.OldName(ctx)
	case osnmap.FieldShortname:
		return m.OldShortname(ctx)
	case osnmap.FieldRoleCount:
		return m.OldRoleCount(ctx)
	}
	return nil, fmt.Errorf("unknown OsnMap field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OsnMapMutation) SetField(name string, value ent.Value) error {
	switch name {
	case osnmap.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case osnmap.FieldShortname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortname(v)
		return nil
	case osnmap.FieldRoleCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleCount(v)
		return nil
	}
	return fmt.Errorf("unknown OsnMap field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OsnMapMutation) AddedFields() []string {
	var fields []string
	if m.addrole_count != nil {
		fields = append(fields, osnmap.FieldRoleCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OsnMapMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case osnmap.FieldRoleCount:
		return m.AddedRoleCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OsnMapMutation) AddField(name string, value ent.Value) error {
	switch name {
	case osnmap.FieldRoleCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleCount(v)
		return nil
	}
	return fmt.Errorf("unknown OsnMap numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OsnMapMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OsnMapMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OsnMapMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OsnMap nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OsnMapMutation) ResetField(name string) error {
	switch name {
	case osnmap.FieldName:
		m.ResetName()
		return nil
	case osnmap.FieldShortname:
		m.ResetShortname()
		return nil
	case osnmap.FieldRoleCount:
		m.ResetRoleCount()
		return nil
	}
	return fmt.Errorf("unknown OsnMap field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OsnMapMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.matches != nil {
		edges = append(edges, osnmap.EdgeMatches)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OsnMapMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case osnmap.EdgeMatches:
		ids := make([]ent.Value, 0, len(m.matches))
		for id := range m.matches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OsnMapMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmatches != nil {
		edges = append(edges, osnmap.EdgeMatches)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OsnMapMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case osnmap.EdgeMatches:
		ids := make([]ent.Value, 0, len(m.removedmatches))
		for id := range m.removedmatches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OsnMapMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmatches {
		edges = append(edges, osnmap.EdgeMatches)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OsnMapMutation) EdgeCleared(name string) bool {
	switch name {
	case osnmap.EdgeMatches:
		return m.clearedmatches
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OsnMapMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown OsnMap unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OsnMapMutation) ResetEdge(name string) error {
	switch name {
	case osnmap.EdgeMatches:
		m.ResetMatches()
		return nil
	}
	return fmt.Errorf("unknown OsnMap edge %s", name)
}

// PlayerMutation represents an operation that mutates the Player nodes in the graph.
type PlayerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	gcid          *string
	name          *string
	clearedFields map[string]struct{}
	roles         map[int]struct{}
	removedroles  map[int]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*Player, error)
	predicates    []predicate.Player
}

var _ ent.Mutation = (*PlayerMutation)(nil)

// playerOption allows management of the mutation configuration using functional options.
type playerOption func(*PlayerMutation)

// newPlayerMutation creates new mutation for the Player entity.
func newPlayerMutation(c config, op Op, opts ...playerOption) *PlayerMutation {
	m := &PlayerMutation{
		config:        c,
		op:            op,
		typ:           TypePlayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerID sets the ID field of the mutation.
func withPlayerID(id int) playerOption {
	return func(m *PlayerMutation) {
		var (
			err   error
			once  sync.Once
			value *Player
		)
		m.oldValue = func(ctx context.Context) (*Player, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Player.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayer sets the old Player of the mutation.
func withPlayer(node *Player) playerOption {
	return func(m *PlayerMutation) {
		m.oldValue = func(context.Context) (*Player, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Player.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGcid sets the "gcid" field.
func (m *PlayerMutation) SetGcid(s string) {
	m.gcid = &s
}

// Gcid returns the value of the "gcid" field in the mutation.
func (m *PlayerMutation) Gcid() (r string, exists bool) {
	v := m.gcid
	if v == nil {
		return
	}
	return *v, true
}

// OldGcid returns the old "gcid" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldGcid(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGcid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGcid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGcid: %w", err)
	}
	return oldValue.Gcid, nil
}

// ResetGcid resets all changes to the "gcid" field.
func (m *PlayerMutation) ResetGcid() {
	m.gcid = nil
}

// SetName sets the "name" field.
func (m *PlayerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlayerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlayerMutation) ResetName() {
	m.name = nil
}

// AddRoleIDs adds the "roles" edge to the PlayerRole entity by ids.
func (m *PlayerMutation) AddRoleIDs(ids ...int) {
	if m.roles == nil {
		m.roles = make(map[int]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the PlayerRole entity.
func (m *PlayerMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the PlayerRole entity was cleared.
func (m *PlayerMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the PlayerRole entity by IDs.
func (m *PlayerMutation) RemoveRoleIDs(ids ...int) {
	if m.removedroles == nil {
		m.removedroles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the PlayerRole entity.
func (m *PlayerMutation) RemovedRolesIDs() (ids []int) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *PlayerMutation) RolesIDs() (ids []int) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *PlayerMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the PlayerMutation builder.
func (m *PlayerMutation) Where(ps ...predicate.Player) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Player, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Player).
func (m *PlayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.gcid != nil {
		fields = append(fields, player.FieldGcid)
	}
	if m.name != nil {
		fields = append(fields, player.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case player.FieldGcid:
		return m.Gcid()
	case player.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case player.FieldGcid:
		return m.OldGcid(ctx)
	case player.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Player field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case player.FieldGcid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGcid(v)
		return nil
	case player.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Player numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Player nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerMutation) ResetField(name string) error {
	switch name {
	case player.FieldGcid:
		m.ResetGcid()
		return nil
	case player.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, player.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, player.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, player.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerMutation) EdgeCleared(name string) bool {
	switch name {
	case player.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Player unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerMutation) ResetEdge(name string) error {
	switch name {
	case player.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Player edge %s", name)
}

// PlayerRoleMutation represents an operation that mutates the PlayerRole nodes in the graph.
type PlayerRoleMutation struct {
	config
	op             Op
	typ            string
	id             *int
	match_id       *int
	addmatch_id    *int
	player_id      *int
	addplayer_id   *int
	position       *int
	addposition    *int
	turn_order     *int
	addturn_order  *int
	clearedFields  map[string]struct{}
	match          map[int]struct{}
	removedmatch   map[int]struct{}
	clearedmatch   bool
	players        map[int]struct{}
	removedplayers map[int]struct{}
	clearedplayers bool
	done           bool
	oldValue       func(context.Context) (*PlayerRole, error)
	predicates     []predicate.PlayerRole
}

var _ ent.Mutation = (*PlayerRoleMutation)(nil)

// playerroleOption allows management of the mutation configuration using functional options.
type playerroleOption func(*PlayerRoleMutation)

// newPlayerRoleMutation creates new mutation for the PlayerRole entity.
func newPlayerRoleMutation(c config, op Op, opts ...playerroleOption) *PlayerRoleMutation {
	m := &PlayerRoleMutation{
		config:        c,
		op:            op,
		typ:           TypePlayerRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerRoleID sets the ID field of the mutation.
func withPlayerRoleID(id int) playerroleOption {
	return func(m *PlayerRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *PlayerRole
		)
		m.oldValue = func(ctx context.Context) (*PlayerRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlayerRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayerRole sets the old PlayerRole of the mutation.
func withPlayerRole(node *PlayerRole) playerroleOption {
	return func(m *PlayerRoleMutation) {
		m.oldValue = func(context.Context) (*PlayerRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerRoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerRoleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlayerRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMatchID sets the "match_id" field.
func (m *PlayerRoleMutation) SetMatchID(i int) {
	m.match_id = &i
	m.addmatch_id = nil
}

// MatchID returns the value of the "match_id" field in the mutation.
func (m *PlayerRoleMutation) MatchID() (r int, exists bool) {
	v := m.match_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMatchID returns the old "match_id" field's value of the PlayerRole entity.
// If the PlayerRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerRoleMutation) OldMatchID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMatchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMatchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMatchID: %w", err)
	}
	return oldValue.MatchID, nil
}

// AddMatchID adds i to the "match_id" field.
func (m *PlayerRoleMutation) AddMatchID(i int) {
	if m.addmatch_id != nil {
		*m.addmatch_id += i
	} else {
		m.addmatch_id = &i
	}
}

// AddedMatchID returns the value that was added to the "match_id" field in this mutation.
func (m *PlayerRoleMutation) AddedMatchID() (r int, exists bool) {
	v := m.addmatch_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMatchID resets all changes to the "match_id" field.
func (m *PlayerRoleMutation) ResetMatchID() {
	m.match_id = nil
	m.addmatch_id = nil
}

// SetPlayerID sets the "player_id" field.
func (m *PlayerRoleMutation) SetPlayerID(i int) {
	m.player_id = &i
	m.addplayer_id = nil
}

// PlayerID returns the value of the "player_id" field in the mutation.
func (m *PlayerRoleMutation) PlayerID() (r int, exists bool) {
	v := m.player_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerID returns the old "player_id" field's value of the PlayerRole entity.
// If the PlayerRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerRoleMutation) OldPlayerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerID: %w", err)
	}
	return oldValue.PlayerID, nil
}

// AddPlayerID adds i to the "player_id" field.
func (m *PlayerRoleMutation) AddPlayerID(i int) {
	if m.addplayer_id != nil {
		*m.addplayer_id += i
	} else {
		m.addplayer_id = &i
	}
}

// AddedPlayerID returns the value that was added to the "player_id" field in this mutation.
func (m *PlayerRoleMutation) AddedPlayerID() (r int, exists bool) {
	v := m.addplayer_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlayerID resets all changes to the "player_id" field.
func (m *PlayerRoleMutation) ResetPlayerID() {
	m.player_id = nil
	m.addplayer_id = nil
}

// SetPosition sets the "position" field.
func (m *PlayerRoleMutation) SetPosition(i int) {
	m.position = &i
	m.addposition = nil
}

// Position returns the value of the "position" field in the mutation.
func (m *PlayerRoleMutation) Position() (r int, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the PlayerRole entity.
// If the PlayerRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerRoleMutation) OldPosition(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// AddPosition adds i to the "position" field.
func (m *PlayerRoleMutation) AddPosition(i int) {
	if m.addposition != nil {
		*m.addposition += i
	} else {
		m.addposition = &i
	}
}

// AddedPosition returns the value that was added to the "position" field in this mutation.
func (m *PlayerRoleMutation) AddedPosition() (r int, exists bool) {
	v := m.addposition
	if v == nil {
		return
	}
	return *v, true
}

// ResetPosition resets all changes to the "position" field.
func (m *PlayerRoleMutation) ResetPosition() {
	m.position = nil
	m.addposition = nil
}

// SetTurnOrder sets the "turn_order" field.
func (m *PlayerRoleMutation) SetTurnOrder(i int) {
	m.turn_order = &i
	m.addturn_order = nil
}

// TurnOrder returns the value of the "turn_order" field in the mutation.
func (m *PlayerRoleMutation) TurnOrder() (r int, exists bool) {
	v := m.turn_order
	if v == nil {
		return
	}
	return *v, true
}

// OldTurnOrder returns the old "turn_order" field's value of the PlayerRole entity.
// If the PlayerRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerRoleMutation) OldTurnOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTurnOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTurnOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTurnOrder: %w", err)
	}
	return oldValue.TurnOrder, nil
}

// AddTurnOrder adds i to the "turn_order" field.
func (m *PlayerRoleMutation) AddTurnOrder(i int) {
	if m.addturn_order != nil {
		*m.addturn_order += i
	} else {
		m.addturn_order = &i
	}
}

// AddedTurnOrder returns the value that was added to the "turn_order" field in this mutation.
func (m *PlayerRoleMutation) AddedTurnOrder() (r int, exists bool) {
	v := m.addturn_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetTurnOrder resets all changes to the "turn_order" field.
func (m *PlayerRoleMutation) ResetTurnOrder() {
	m.turn_order = nil
	m.addturn_order = nil
}

// AddMatchIDs adds the "match" edge to the Match entity by ids.
func (m *PlayerRoleMutation) AddMatchIDs(ids ...int) {
	if m.match == nil {
		m.match = make(map[int]struct{})
	}
	for i := range ids {
		m.match[ids[i]] = struct{}{}
	}
}

// ClearMatch clears the "match" edge to the Match entity.
func (m *PlayerRoleMutation) ClearMatch() {
	m.clearedmatch = true
}

// MatchCleared reports if the "match" edge to the Match entity was cleared.
func (m *PlayerRoleMutation) MatchCleared() bool {
	return m.clearedmatch
}

// RemoveMatchIDs removes the "match" edge to the Match entity by IDs.
func (m *PlayerRoleMutation) RemoveMatchIDs(ids ...int) {
	if m.removedmatch == nil {
		m.removedmatch = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.match, ids[i])
		m.removedmatch[ids[i]] = struct{}{}
	}
}

// RemovedMatch returns the removed IDs of the "match" edge to the Match entity.
func (m *PlayerRoleMutation) RemovedMatchIDs() (ids []int) {
	for id := range m.removedmatch {
		ids = append(ids, id)
	}
	return
}

// MatchIDs returns the "match" edge IDs in the mutation.
func (m *PlayerRoleMutation) MatchIDs() (ids []int) {
	for id := range m.match {
		ids = append(ids, id)
	}
	return
}

// ResetMatch resets all changes to the "match" edge.
func (m *PlayerRoleMutation) ResetMatch() {
	m.match = nil
	m.clearedmatch = false
	m.removedmatch = nil
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *PlayerRoleMutation) AddPlayerIDs(ids ...int) {
	if m.players == nil {
		m.players = make(map[int]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *PlayerRoleMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *PlayerRoleMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *PlayerRoleMutation) RemovePlayerIDs(ids ...int) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *PlayerRoleMutation) RemovedPlayersIDs() (ids []int) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *PlayerRoleMutation) PlayersIDs() (ids []int) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *PlayerRoleMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// Where appends a list predicates to the PlayerRoleMutation builder.
func (m *PlayerRoleMutation) Where(ps ...predicate.PlayerRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PlayerRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PlayerRole).
func (m *PlayerRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerRoleMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.match_id != nil {
		fields = append(fields, playerrole.FieldMatchID)
	}
	if m.player_id != nil {
		fields = append(fields, playerrole.FieldPlayerID)
	}
	if m.position != nil {
		fields = append(fields, playerrole.FieldPosition)
	}
	if m.turn_order != nil {
		fields = append(fields, playerrole.FieldTurnOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playerrole.FieldMatchID:
		return m.MatchID()
	case playerrole.FieldPlayerID:
		return m.PlayerID()
	case playerrole.FieldPosition:
		return m.Position()
	case playerrole.FieldTurnOrder:
		return m.TurnOrder()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playerrole.FieldMatchID:
		return m.OldMatchID(ctx)
	case playerrole.FieldPlayerID:
		return m.OldPlayerID(ctx)
	case playerrole.FieldPosition:
		return m.OldPosition(ctx)
	case playerrole.FieldTurnOrder:
		return m.OldTurnOrder(ctx)
	}
	return nil, fmt.Errorf("unknown PlayerRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playerrole.FieldMatchID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMatchID(v)
		return nil
	case playerrole.FieldPlayerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerID(v)
		return nil
	case playerrole.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case playerrole.FieldTurnOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTurnOrder(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerRoleMutation) AddedFields() []string {
	var fields []string
	if m.addmatch_id != nil {
		fields = append(fields, playerrole.FieldMatchID)
	}
	if m.addplayer_id != nil {
		fields = append(fields, playerrole.FieldPlayerID)
	}
	if m.addposition != nil {
		fields = append(fields, playerrole.FieldPosition)
	}
	if m.addturn_order != nil {
		fields = append(fields, playerrole.FieldTurnOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case playerrole.FieldMatchID:
		return m.AddedMatchID()
	case playerrole.FieldPlayerID:
		return m.AddedPlayerID()
	case playerrole.FieldPosition:
		return m.AddedPosition()
	case playerrole.FieldTurnOrder:
		return m.AddedTurnOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case playerrole.FieldMatchID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMatchID(v)
		return nil
	case playerrole.FieldPlayerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlayerID(v)
		return nil
	case playerrole.FieldPosition:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPosition(v)
		return nil
	case playerrole.FieldTurnOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTurnOrder(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerRoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerRoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlayerRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerRoleMutation) ResetField(name string) error {
	switch name {
	case playerrole.FieldMatchID:
		m.ResetMatchID()
		return nil
	case playerrole.FieldPlayerID:
		m.ResetPlayerID()
		return nil
	case playerrole.FieldPosition:
		m.ResetPosition()
		return nil
	case playerrole.FieldTurnOrder:
		m.ResetTurnOrder()
		return nil
	}
	return fmt.Errorf("unknown PlayerRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.match != nil {
		edges = append(edges, playerrole.EdgeMatch)
	}
	if m.players != nil {
		edges = append(edges, playerrole.EdgePlayers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerRoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playerrole.EdgeMatch:
		ids := make([]ent.Value, 0, len(m.match))
		for id := range m.match {
			ids = append(ids, id)
		}
		return ids
	case playerrole.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmatch != nil {
		edges = append(edges, playerrole.EdgeMatch)
	}
	if m.removedplayers != nil {
		edges = append(edges, playerrole.EdgePlayers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerRoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playerrole.EdgeMatch:
		ids := make([]ent.Value, 0, len(m.removedmatch))
		for id := range m.removedmatch {
			ids = append(ids, id)
		}
		return ids
	case playerrole.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmatch {
		edges = append(edges, playerrole.EdgeMatch)
	}
	if m.clearedplayers {
		edges = append(edges, playerrole.EdgePlayers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerRoleMutation) EdgeCleared(name string) bool {
	switch name {
	case playerrole.EdgeMatch:
		return m.clearedmatch
	case playerrole.EdgePlayers:
		return m.clearedplayers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerRoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown PlayerRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerRoleMutation) ResetEdge(name string) error {
	switch name {
	case playerrole.EdgeMatch:
		m.ResetMatch()
		return nil
	case playerrole.EdgePlayers:
		m.ResetPlayers()
		return nil
	}
	return fmt.Errorf("unknown PlayerRole edge %s", name)
}
