// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/osnmap"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// OsnMapUpdate is the builder for updating OsnMap entities.
type OsnMapUpdate struct {
	config
	hooks    []Hook
	mutation *OsnMapMutation
}

// Where appends a list predicates to the OsnMapUpdate builder.
func (omu *OsnMapUpdate) Where(ps ...predicate.OsnMap) *OsnMapUpdate {
	omu.mutation.Where(ps...)
	return omu
}

// SetName sets the "name" field.
func (omu *OsnMapUpdate) SetName(s string) *OsnMapUpdate {
	omu.mutation.SetName(s)
	return omu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (omu *OsnMapUpdate) SetNillableName(s *string) *OsnMapUpdate {
	if s != nil {
		omu.SetName(*s)
	}
	return omu
}

// SetShortname sets the "shortname" field.
func (omu *OsnMapUpdate) SetShortname(s string) *OsnMapUpdate {
	omu.mutation.SetShortname(s)
	return omu
}

// SetNillableShortname sets the "shortname" field if the given value is not nil.
func (omu *OsnMapUpdate) SetNillableShortname(s *string) *OsnMapUpdate {
	if s != nil {
		omu.SetShortname(*s)
	}
	return omu
}

// SetRoleCount sets the "role_count" field.
func (omu *OsnMapUpdate) SetRoleCount(i int) *OsnMapUpdate {
	omu.mutation.ResetRoleCount()
	omu.mutation.SetRoleCount(i)
	return omu
}

// SetNillableRoleCount sets the "role_count" field if the given value is not nil.
func (omu *OsnMapUpdate) SetNillableRoleCount(i *int) *OsnMapUpdate {
	if i != nil {
		omu.SetRoleCount(*i)
	}
	return omu
}

// AddRoleCount adds i to the "role_count" field.
func (omu *OsnMapUpdate) AddRoleCount(i int) *OsnMapUpdate {
	omu.mutation.AddRoleCount(i)
	return omu
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (omu *OsnMapUpdate) AddMatchIDs(ids ...int) *OsnMapUpdate {
	omu.mutation.AddMatchIDs(ids...)
	return omu
}

// AddMatches adds the "matches" edges to the Match entity.
func (omu *OsnMapUpdate) AddMatches(m ...*Match) *OsnMapUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omu.AddMatchIDs(ids...)
}

// Mutation returns the OsnMapMutation object of the builder.
func (omu *OsnMapUpdate) Mutation() *OsnMapMutation {
	return omu.mutation
}

// ClearMatches clears all "matches" edges to the Match entity.
func (omu *OsnMapUpdate) ClearMatches() *OsnMapUpdate {
	omu.mutation.ClearMatches()
	return omu
}

// RemoveMatchIDs removes the "matches" edge to Match entities by IDs.
func (omu *OsnMapUpdate) RemoveMatchIDs(ids ...int) *OsnMapUpdate {
	omu.mutation.RemoveMatchIDs(ids...)
	return omu
}

// RemoveMatches removes "matches" edges to Match entities.
func (omu *OsnMapUpdate) RemoveMatches(m ...*Match) *OsnMapUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omu.RemoveMatchIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (omu *OsnMapUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, omu.sqlSave, omu.mutation, omu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omu *OsnMapUpdate) SaveX(ctx context.Context) int {
	affected, err := omu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (omu *OsnMapUpdate) Exec(ctx context.Context) error {
	_, err := omu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omu *OsnMapUpdate) ExecX(ctx context.Context) {
	if err := omu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omu *OsnMapUpdate) check() error {
	if v, ok := omu.mutation.RoleCount(); ok {
		if err := osnmap.RoleCountValidator(v); err != nil {
			return &ValidationError{Name: "role_count", err: fmt.Errorf(`ent: validator failed for field "OsnMap.role_count": %w`, err)}
		}
	}
	return nil
}

func (omu *OsnMapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := omu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(osnmap.Table, osnmap.Columns, sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt))
	if ps := omu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omu.mutation.Name(); ok {
		_spec.SetField(osnmap.FieldName, field.TypeString, value)
	}
	if value, ok := omu.mutation.Shortname(); ok {
		_spec.SetField(osnmap.FieldShortname, field.TypeString, value)
	}
	if value, ok := omu.mutation.RoleCount(); ok {
		_spec.SetField(osnmap.FieldRoleCount, field.TypeInt, value)
	}
	if value, ok := omu.mutation.AddedRoleCount(); ok {
		_spec.AddField(osnmap.FieldRoleCount, field.TypeInt, value)
	}
	if omu.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.RemovedMatchesIDs(); len(nodes) > 0 && !omu.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, omu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osnmap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	omu.mutation.done = true
	return n, nil
}

// OsnMapUpdateOne is the builder for updating a single OsnMap entity.
type OsnMapUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OsnMapMutation
}

// SetName sets the "name" field.
func (omuo *OsnMapUpdateOne) SetName(s string) *OsnMapUpdateOne {
	omuo.mutation.SetName(s)
	return omuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (omuo *OsnMapUpdateOne) SetNillableName(s *string) *OsnMapUpdateOne {
	if s != nil {
		omuo.SetName(*s)
	}
	return omuo
}

// SetShortname sets the "shortname" field.
func (omuo *OsnMapUpdateOne) SetShortname(s string) *OsnMapUpdateOne {
	omuo.mutation.SetShortname(s)
	return omuo
}

// SetNillableShortname sets the "shortname" field if the given value is not nil.
func (omuo *OsnMapUpdateOne) SetNillableShortname(s *string) *OsnMapUpdateOne {
	if s != nil {
		omuo.SetShortname(*s)
	}
	return omuo
}

// SetRoleCount sets the "role_count" field.
func (omuo *OsnMapUpdateOne) SetRoleCount(i int) *OsnMapUpdateOne {
	omuo.mutation.ResetRoleCount()
	omuo.mutation.SetRoleCount(i)
	return omuo
}

// SetNillableRoleCount sets the "role_count" field if the given value is not nil.
func (omuo *OsnMapUpdateOne) SetNillableRoleCount(i *int) *OsnMapUpdateOne {
	if i != nil {
		omuo.SetRoleCount(*i)
	}
	return omuo
}

// AddRoleCount adds i to the "role_count" field.
func (omuo *OsnMapUpdateOne) AddRoleCount(i int) *OsnMapUpdateOne {
	omuo.mutation.AddRoleCount(i)
	return omuo
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (omuo *OsnMapUpdateOne) AddMatchIDs(ids ...int) *OsnMapUpdateOne {
	omuo.mutation.AddMatchIDs(ids...)
	return omuo
}

// AddMatches adds the "matches" edges to the Match entity.
func (omuo *OsnMapUpdateOne) AddMatches(m ...*Match) *OsnMapUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omuo.AddMatchIDs(ids...)
}

// Mutation returns the OsnMapMutation object of the builder.
func (omuo *OsnMapUpdateOne) Mutation() *OsnMapMutation {
	return omuo.mutation
}

// ClearMatches clears all "matches" edges to the Match entity.
func (omuo *OsnMapUpdateOne) ClearMatches() *OsnMapUpdateOne {
	omuo.mutation.ClearMatches()
	return omuo
}

// RemoveMatchIDs removes the "matches" edge to Match entities by IDs.
func (omuo *OsnMapUpdateOne) RemoveMatchIDs(ids ...int) *OsnMapUpdateOne {
	omuo.mutation.RemoveMatchIDs(ids...)
	return omuo
}

// RemoveMatches removes "matches" edges to Match entities.
func (omuo *OsnMapUpdateOne) RemoveMatches(m ...*Match) *OsnMapUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omuo.RemoveMatchIDs(ids...)
}

// Where appends a list predicates to the OsnMapUpdate builder.
func (omuo *OsnMapUpdateOne) Where(ps ...predicate.OsnMap) *OsnMapUpdateOne {
	omuo.mutation.Where(ps...)
	return omuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (omuo *OsnMapUpdateOne) Select(field string, fields ...string) *OsnMapUpdateOne {
	omuo.fields = append([]string{field}, fields...)
	return omuo
}

// Save executes the query and returns the updated OsnMap entity.
func (omuo *OsnMapUpdateOne) Save(ctx context.Context) (*OsnMap, error) {
	return withHooks(ctx, omuo.sqlSave, omuo.mutation, omuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omuo *OsnMapUpdateOne) SaveX(ctx context.Context) *OsnMap {
	node, err := omuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (omuo *OsnMapUpdateOne) Exec(ctx context.Context) error {
	_, err := omuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omuo *OsnMapUpdateOne) ExecX(ctx context.Context) {
	if err := omuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omuo *OsnMapUpdateOne) check() error {
	if v, ok := omuo.mutation.RoleCount(); ok {
		if err := osnmap.RoleCountValidator(v); err != nil {
			return &ValidationError{Name: "role_count", err: fmt.Errorf(`ent: validator failed for field "OsnMap.role_count": %w`, err)}
		}
	}
	return nil
}

func (omuo *OsnMapUpdateOne) sqlSave(ctx context.Context) (_node *OsnMap, err error) {
	if err := omuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(osnmap.Table, osnmap.Columns, sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt))
	id, ok := omuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OsnMap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := omuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osnmap.FieldID)
		for _, f := range fields {
			if !osnmap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != osnmap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := omuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omuo.mutation.Name(); ok {
		_spec.SetField(osnmap.FieldName, field.TypeString, value)
	}
	if value, ok := omuo.mutation.Shortname(); ok {
		_spec.SetField(osnmap.FieldShortname, field.TypeString, value)
	}
	if value, ok := omuo.mutation.RoleCount(); ok {
		_spec.SetField(osnmap.FieldRoleCount, field.TypeInt, value)
	}
	if value, ok := omuo.mutation.AddedRoleCount(); ok {
		_spec.AddField(osnmap.FieldRoleCount, field.TypeInt, value)
	}
	if omuo.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.RemovedMatchesIDs(); len(nodes) > 0 && !omuo.mutation.MatchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OsnMap{config: omuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, omuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osnmap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	omuo.mutation.done = true
	return _node, nil
}
