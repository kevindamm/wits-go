// Code generated by ent, DO NOT EDIT.

package playerrole

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the playerrole type in the database.
	Label = "player_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMatchID holds the string denoting the match_id field in the database.
	FieldMatchID = "role_match"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "role_player"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldTurnOrder holds the string denoting the turn_order field in the database.
	FieldTurnOrder = "turn_order"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// Table holds the table name of the playerrole in the database.
	Table = "player_roles"
	// MatchTable is the table that holds the match relation/edge. The primary key declared below.
	MatchTable = "player_role_match"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "player_role_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
)

// Columns holds all SQL columns for playerrole fields.
var Columns = []string{
	FieldID,
	FieldMatchID,
	FieldPlayerID,
	FieldPosition,
	FieldTurnOrder,
}

var (
	// MatchPrimaryKey and MatchColumn2 are the table columns denoting the
	// primary key for the match relation (M2M).
	MatchPrimaryKey = []string{"role_match", "id"}
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"role_player", "id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PositionValidator is a validator for the "position" field. It is called by the builders before save.
	PositionValidator func(int) error
	// TurnOrderValidator is a validator for the "turn_order" field. It is called by the builders before save.
	TurnOrderValidator func(int) error
)

// OrderOption defines the ordering options for the PlayerRole queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMatchID orders the results by the match_id field.
func ByMatchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchID, opts...).ToFunc()
}

// ByPlayerID orders the results by the player_id field.
func ByPlayerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayerID, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByTurnOrder orders the results by the turn_order field.
func ByTurnOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTurnOrder, opts...).ToFunc()
}

// ByMatchCount orders the results by match count.
func ByMatchCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchStep(), opts...)
	}
}

// ByMatch orders the results by match terms.
func ByMatch(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMatchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MatchTable, MatchPrimaryKey...),
	)
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PlayersTable, PlayersPrimaryKey...),
	)
}
