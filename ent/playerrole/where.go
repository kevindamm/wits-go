// Code generated by ent, DO NOT EDIT.

package playerrole

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLTE(FieldID, id))
}

// MatchID applies equality check predicate on the "match_id" field. It's identical to MatchIDEQ.
func MatchID(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldMatchID, v))
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldPlayerID, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldPosition, v))
}

// TurnOrder applies equality check predicate on the "turn_order" field. It's identical to TurnOrderEQ.
func TurnOrder(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldTurnOrder, v))
}

// MatchIDEQ applies the EQ predicate on the "match_id" field.
func MatchIDEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldMatchID, v))
}

// MatchIDNEQ applies the NEQ predicate on the "match_id" field.
func MatchIDNEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNEQ(FieldMatchID, v))
}

// MatchIDIn applies the In predicate on the "match_id" field.
func MatchIDIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldIn(FieldMatchID, vs...))
}

// MatchIDNotIn applies the NotIn predicate on the "match_id" field.
func MatchIDNotIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNotIn(FieldMatchID, vs...))
}

// MatchIDGT applies the GT predicate on the "match_id" field.
func MatchIDGT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGT(FieldMatchID, v))
}

// MatchIDGTE applies the GTE predicate on the "match_id" field.
func MatchIDGTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGTE(FieldMatchID, v))
}

// MatchIDLT applies the LT predicate on the "match_id" field.
func MatchIDLT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLT(FieldMatchID, v))
}

// MatchIDLTE applies the LTE predicate on the "match_id" field.
func MatchIDLTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLTE(FieldMatchID, v))
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNotIn(FieldPlayerID, vs...))
}

// PlayerIDGT applies the GT predicate on the "player_id" field.
func PlayerIDGT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGT(FieldPlayerID, v))
}

// PlayerIDGTE applies the GTE predicate on the "player_id" field.
func PlayerIDGTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGTE(FieldPlayerID, v))
}

// PlayerIDLT applies the LT predicate on the "player_id" field.
func PlayerIDLT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLT(FieldPlayerID, v))
}

// PlayerIDLTE applies the LTE predicate on the "player_id" field.
func PlayerIDLTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLTE(FieldPlayerID, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLTE(FieldPosition, v))
}

// TurnOrderEQ applies the EQ predicate on the "turn_order" field.
func TurnOrderEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldEQ(FieldTurnOrder, v))
}

// TurnOrderNEQ applies the NEQ predicate on the "turn_order" field.
func TurnOrderNEQ(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNEQ(FieldTurnOrder, v))
}

// TurnOrderIn applies the In predicate on the "turn_order" field.
func TurnOrderIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldIn(FieldTurnOrder, vs...))
}

// TurnOrderNotIn applies the NotIn predicate on the "turn_order" field.
func TurnOrderNotIn(vs ...int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldNotIn(FieldTurnOrder, vs...))
}

// TurnOrderGT applies the GT predicate on the "turn_order" field.
func TurnOrderGT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGT(FieldTurnOrder, v))
}

// TurnOrderGTE applies the GTE predicate on the "turn_order" field.
func TurnOrderGTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldGTE(FieldTurnOrder, v))
}

// TurnOrderLT applies the LT predicate on the "turn_order" field.
func TurnOrderLT(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLT(FieldTurnOrder, v))
}

// TurnOrderLTE applies the LTE predicate on the "turn_order" field.
func TurnOrderLTE(v int) predicate.PlayerRole {
	return predicate.PlayerRole(sql.FieldLTE(FieldTurnOrder, v))
}

// HasMatch applies the HasEdge predicate on the "match" edge.
func HasMatch() predicate.PlayerRole {
	return predicate.PlayerRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MatchTable, MatchPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchWith applies the HasEdge predicate on the "match" edge with a given conditions (other predicates).
func HasMatchWith(preds ...predicate.Match) predicate.PlayerRole {
	return predicate.PlayerRole(func(s *sql.Selector) {
		step := newMatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayers applies the HasEdge predicate on the "players" edge.
func HasPlayers() predicate.PlayerRole {
	return predicate.PlayerRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PlayersTable, PlayersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayersWith applies the HasEdge predicate on the "players" edge with a given conditions (other predicates).
func HasPlayersWith(preds ...predicate.Player) predicate.PlayerRole {
	return predicate.PlayerRole(func(s *sql.Selector) {
		step := newPlayersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlayerRole) predicate.PlayerRole {
	return predicate.PlayerRole(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlayerRole) predicate.PlayerRole {
	return predicate.PlayerRole(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlayerRole) predicate.PlayerRole {
	return predicate.PlayerRole(sql.NotPredicates(p))
}
