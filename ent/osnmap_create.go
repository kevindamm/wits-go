// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/osnmap"
)

// OsnMapCreate is the builder for creating a OsnMap entity.
type OsnMapCreate struct {
	config
	mutation *OsnMapMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (omc *OsnMapCreate) SetName(s string) *OsnMapCreate {
	omc.mutation.SetName(s)
	return omc
}

// SetShortname sets the "shortname" field.
func (omc *OsnMapCreate) SetShortname(s string) *OsnMapCreate {
	omc.mutation.SetShortname(s)
	return omc
}

// SetRoleCount sets the "role_count" field.
func (omc *OsnMapCreate) SetRoleCount(i int) *OsnMapCreate {
	omc.mutation.SetRoleCount(i)
	return omc
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (omc *OsnMapCreate) AddMatchIDs(ids ...int) *OsnMapCreate {
	omc.mutation.AddMatchIDs(ids...)
	return omc
}

// AddMatches adds the "matches" edges to the Match entity.
func (omc *OsnMapCreate) AddMatches(m ...*Match) *OsnMapCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return omc.AddMatchIDs(ids...)
}

// Mutation returns the OsnMapMutation object of the builder.
func (omc *OsnMapCreate) Mutation() *OsnMapMutation {
	return omc.mutation
}

// Save creates the OsnMap in the database.
func (omc *OsnMapCreate) Save(ctx context.Context) (*OsnMap, error) {
	return withHooks(ctx, omc.sqlSave, omc.mutation, omc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (omc *OsnMapCreate) SaveX(ctx context.Context) *OsnMap {
	v, err := omc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omc *OsnMapCreate) Exec(ctx context.Context) error {
	_, err := omc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omc *OsnMapCreate) ExecX(ctx context.Context) {
	if err := omc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omc *OsnMapCreate) check() error {
	if _, ok := omc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OsnMap.name"`)}
	}
	if _, ok := omc.mutation.Shortname(); !ok {
		return &ValidationError{Name: "shortname", err: errors.New(`ent: missing required field "OsnMap.shortname"`)}
	}
	if _, ok := omc.mutation.RoleCount(); !ok {
		return &ValidationError{Name: "role_count", err: errors.New(`ent: missing required field "OsnMap.role_count"`)}
	}
	if v, ok := omc.mutation.RoleCount(); ok {
		if err := osnmap.RoleCountValidator(v); err != nil {
			return &ValidationError{Name: "role_count", err: fmt.Errorf(`ent: validator failed for field "OsnMap.role_count": %w`, err)}
		}
	}
	return nil
}

func (omc *OsnMapCreate) sqlSave(ctx context.Context) (*OsnMap, error) {
	if err := omc.check(); err != nil {
		return nil, err
	}
	_node, _spec := omc.createSpec()
	if err := sqlgraph.CreateNode(ctx, omc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	omc.mutation.id = &_node.ID
	omc.mutation.done = true
	return _node, nil
}

func (omc *OsnMapCreate) createSpec() (*OsnMap, *sqlgraph.CreateSpec) {
	var (
		_node = &OsnMap{config: omc.config}
		_spec = sqlgraph.NewCreateSpec(osnmap.Table, sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt))
	)
	if value, ok := omc.mutation.Name(); ok {
		_spec.SetField(osnmap.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := omc.mutation.Shortname(); ok {
		_spec.SetField(osnmap.FieldShortname, field.TypeString, value)
		_node.Shortname = value
	}
	if value, ok := omc.mutation.RoleCount(); ok {
		_spec.SetField(osnmap.FieldRoleCount, field.TypeInt, value)
		_node.RoleCount = value
	}
	if nodes := omc.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   osnmap.MatchesTable,
			Columns: []string{osnmap.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OsnMapCreateBulk is the builder for creating many OsnMap entities in bulk.
type OsnMapCreateBulk struct {
	config
	err      error
	builders []*OsnMapCreate
}

// Save creates the OsnMap entities in the database.
func (omcb *OsnMapCreateBulk) Save(ctx context.Context) ([]*OsnMap, error) {
	if omcb.err != nil {
		return nil, omcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(omcb.builders))
	nodes := make([]*OsnMap, len(omcb.builders))
	mutators := make([]Mutator, len(omcb.builders))
	for i := range omcb.builders {
		func(i int, root context.Context) {
			builder := omcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OsnMapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, omcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, omcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, omcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (omcb *OsnMapCreateBulk) SaveX(ctx context.Context) []*OsnMap {
	v, err := omcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omcb *OsnMapCreateBulk) Exec(ctx context.Context) error {
	_, err := omcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omcb *OsnMapCreateBulk) ExecX(ctx context.Context) {
	if err := omcb.Exec(ctx); err != nil {
		panic(err)
	}
}
