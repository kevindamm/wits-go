// Code generated by ent, DO NOT EDIT.

package match

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the match type in the database.
	Label = "match"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMatchHash holds the string denoting the match_hash field in the database.
	FieldMatchHash = "match_hash"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSeason holds the string denoting the season field in the database.
	FieldSeason = "season"
	// FieldCreatedTs holds the string denoting the created_ts field in the database.
	FieldCreatedTs = "created_ts"
	// FieldTurnCount holds the string denoting the turn_count field in the database.
	FieldTurnCount = "turn_count"
	// FieldFetchStatus holds the string denoting the fetch_status field in the database.
	FieldFetchStatus = "fetch_status"
	// EdgeMap holds the string denoting the map edge name in mutations.
	EdgeMap = "map"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// Table holds the table name of the match in the database.
	Table = "matches"
	// MapTable is the table that holds the map relation/edge.
	MapTable = "matches"
	// MapInverseTable is the table name for the OsnMap entity.
	// It exists in this package in order to avoid circular dependency with the "osnmap" package.
	MapInverseTable = "osn_maps"
	// MapColumn is the table column denoting the map relation/edge.
	MapColumn = "osn_map_matches"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "player_role_match"
	// RolesInverseTable is the table name for the PlayerRole entity.
	// It exists in this package in order to avoid circular dependency with the "playerrole" package.
	RolesInverseTable = "player_roles"
)

// Columns holds all SQL columns for match fields.
var Columns = []string{
	FieldID,
	FieldMatchHash,
	FieldVersion,
	FieldSeason,
	FieldCreatedTs,
	FieldTurnCount,
	FieldFetchStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "matches"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"osn_map_matches",
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"role_match", "id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSeason holds the default value on creation for the "season" field.
	DefaultSeason int8
	// DefaultCreatedTs holds the default value on creation for the "created_ts" field.
	DefaultCreatedTs func() time.Time
)

// FetchStatus defines the type for the "fetch_status" enum field.
type FetchStatus string

// FetchStatusLISTED is the default value of the FetchStatus enum.
const DefaultFetchStatus = FetchStatusLISTED

// FetchStatus values.
const (
	FetchStatusUNKNOWN   FetchStatus = "UNKNOWN"
	FetchStatusLISTED    FetchStatus = "LISTED"
	FetchStatusFETCHED   FetchStatus = "FETCHED"
	FetchStatusUNWRAPPED FetchStatus = "UNWRAPPED"
	FetchStatusCONVERTED FetchStatus = "CONVERTED"
	FetchStatusCANONICAL FetchStatus = "CANONICAL"
	FetchStatusVALIDATED FetchStatus = "VALIDATED"
	FetchStatusINDEXED   FetchStatus = "INDEXED"
	FetchStatusINVALID   FetchStatus = "INVALID"
	FetchStatusLEGACY    FetchStatus = "LEGACY"
)

func (fs FetchStatus) String() string {
	return string(fs)
}

// FetchStatusValidator is a validator for the "fetch_status" field enum values. It is called by the builders before save.
func FetchStatusValidator(fs FetchStatus) error {
	switch fs {
	case FetchStatusUNKNOWN, FetchStatusLISTED, FetchStatusFETCHED, FetchStatusUNWRAPPED, FetchStatusCONVERTED, FetchStatusCANONICAL, FetchStatusVALIDATED, FetchStatusINDEXED, FetchStatusINVALID, FetchStatusLEGACY:
		return nil
	default:
		return fmt.Errorf("match: invalid enum value for fetch_status field: %q", fs)
	}
}

// OrderOption defines the ordering options for the Match queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMatchHash orders the results by the match_hash field.
func ByMatchHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchHash, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// BySeason orders the results by the season field.
func BySeason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeason, opts...).ToFunc()
}

// ByCreatedTs orders the results by the created_ts field.
func ByCreatedTs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTs, opts...).ToFunc()
}

// ByTurnCount orders the results by the turn_count field.
func ByTurnCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTurnCount, opts...).ToFunc()
}

// ByFetchStatus orders the results by the fetch_status field.
func ByFetchStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFetchStatus, opts...).ToFunc()
}

// ByMapField orders the results by map field.
func ByMapField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMapStep(), sql.OrderByField(field, opts...))
	}
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMapStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MapInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MapTable, MapColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
	)
}
