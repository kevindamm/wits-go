// Code generated by ent, DO NOT EDIT.

package match

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldID, id))
}

// MatchHash applies equality check predicate on the "match_hash" field. It's identical to MatchHashEQ.
func MatchHash(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldMatchHash, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldVersion, v))
}

// Season applies equality check predicate on the "season" field. It's identical to SeasonEQ.
func Season(v int8) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldSeason, v))
}

// CreatedTs applies equality check predicate on the "created_ts" field. It's identical to CreatedTsEQ.
func CreatedTs(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldCreatedTs, v))
}

// TurnCount applies equality check predicate on the "turn_count" field. It's identical to TurnCountEQ.
func TurnCount(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldTurnCount, v))
}

// MatchHashEQ applies the EQ predicate on the "match_hash" field.
func MatchHashEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldMatchHash, v))
}

// MatchHashNEQ applies the NEQ predicate on the "match_hash" field.
func MatchHashNEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldMatchHash, v))
}

// MatchHashIn applies the In predicate on the "match_hash" field.
func MatchHashIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldMatchHash, vs...))
}

// MatchHashNotIn applies the NotIn predicate on the "match_hash" field.
func MatchHashNotIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldMatchHash, vs...))
}

// MatchHashGT applies the GT predicate on the "match_hash" field.
func MatchHashGT(v string) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldMatchHash, v))
}

// MatchHashGTE applies the GTE predicate on the "match_hash" field.
func MatchHashGTE(v string) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldMatchHash, v))
}

// MatchHashLT applies the LT predicate on the "match_hash" field.
func MatchHashLT(v string) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldMatchHash, v))
}

// MatchHashLTE applies the LTE predicate on the "match_hash" field.
func MatchHashLTE(v string) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldMatchHash, v))
}

// MatchHashContains applies the Contains predicate on the "match_hash" field.
func MatchHashContains(v string) predicate.Match {
	return predicate.Match(sql.FieldContains(FieldMatchHash, v))
}

// MatchHashHasPrefix applies the HasPrefix predicate on the "match_hash" field.
func MatchHashHasPrefix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasPrefix(FieldMatchHash, v))
}

// MatchHashHasSuffix applies the HasSuffix predicate on the "match_hash" field.
func MatchHashHasSuffix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasSuffix(FieldMatchHash, v))
}

// MatchHashEqualFold applies the EqualFold predicate on the "match_hash" field.
func MatchHashEqualFold(v string) predicate.Match {
	return predicate.Match(sql.FieldEqualFold(FieldMatchHash, v))
}

// MatchHashContainsFold applies the ContainsFold predicate on the "match_hash" field.
func MatchHashContainsFold(v string) predicate.Match {
	return predicate.Match(sql.FieldContainsFold(FieldMatchHash, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldVersion, v))
}

// SeasonEQ applies the EQ predicate on the "season" field.
func SeasonEQ(v int8) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldSeason, v))
}

// SeasonNEQ applies the NEQ predicate on the "season" field.
func SeasonNEQ(v int8) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldSeason, v))
}

// SeasonIn applies the In predicate on the "season" field.
func SeasonIn(vs ...int8) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldSeason, vs...))
}

// SeasonNotIn applies the NotIn predicate on the "season" field.
func SeasonNotIn(vs ...int8) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldSeason, vs...))
}

// SeasonGT applies the GT predicate on the "season" field.
func SeasonGT(v int8) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldSeason, v))
}

// SeasonGTE applies the GTE predicate on the "season" field.
func SeasonGTE(v int8) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldSeason, v))
}

// SeasonLT applies the LT predicate on the "season" field.
func SeasonLT(v int8) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldSeason, v))
}

// SeasonLTE applies the LTE predicate on the "season" field.
func SeasonLTE(v int8) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldSeason, v))
}

// CreatedTsEQ applies the EQ predicate on the "created_ts" field.
func CreatedTsEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldCreatedTs, v))
}

// CreatedTsNEQ applies the NEQ predicate on the "created_ts" field.
func CreatedTsNEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldCreatedTs, v))
}

// CreatedTsIn applies the In predicate on the "created_ts" field.
func CreatedTsIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldCreatedTs, vs...))
}

// CreatedTsNotIn applies the NotIn predicate on the "created_ts" field.
func CreatedTsNotIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldCreatedTs, vs...))
}

// CreatedTsGT applies the GT predicate on the "created_ts" field.
func CreatedTsGT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldCreatedTs, v))
}

// CreatedTsGTE applies the GTE predicate on the "created_ts" field.
func CreatedTsGTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldCreatedTs, v))
}

// CreatedTsLT applies the LT predicate on the "created_ts" field.
func CreatedTsLT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldCreatedTs, v))
}

// CreatedTsLTE applies the LTE predicate on the "created_ts" field.
func CreatedTsLTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldCreatedTs, v))
}

// TurnCountEQ applies the EQ predicate on the "turn_count" field.
func TurnCountEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldTurnCount, v))
}

// TurnCountNEQ applies the NEQ predicate on the "turn_count" field.
func TurnCountNEQ(v int) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldTurnCount, v))
}

// TurnCountIn applies the In predicate on the "turn_count" field.
func TurnCountIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldTurnCount, vs...))
}

// TurnCountNotIn applies the NotIn predicate on the "turn_count" field.
func TurnCountNotIn(vs ...int) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldTurnCount, vs...))
}

// TurnCountGT applies the GT predicate on the "turn_count" field.
func TurnCountGT(v int) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldTurnCount, v))
}

// TurnCountGTE applies the GTE predicate on the "turn_count" field.
func TurnCountGTE(v int) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldTurnCount, v))
}

// TurnCountLT applies the LT predicate on the "turn_count" field.
func TurnCountLT(v int) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldTurnCount, v))
}

// TurnCountLTE applies the LTE predicate on the "turn_count" field.
func TurnCountLTE(v int) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldTurnCount, v))
}

// FetchStatusEQ applies the EQ predicate on the "fetch_status" field.
func FetchStatusEQ(v FetchStatus) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldFetchStatus, v))
}

// FetchStatusNEQ applies the NEQ predicate on the "fetch_status" field.
func FetchStatusNEQ(v FetchStatus) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldFetchStatus, v))
}

// FetchStatusIn applies the In predicate on the "fetch_status" field.
func FetchStatusIn(vs ...FetchStatus) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldFetchStatus, vs...))
}

// FetchStatusNotIn applies the NotIn predicate on the "fetch_status" field.
func FetchStatusNotIn(vs ...FetchStatus) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldFetchStatus, vs...))
}

// HasMap applies the HasEdge predicate on the "map" edge.
func HasMap() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MapTable, MapColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMapWith applies the HasEdge predicate on the "map" edge with a given conditions (other predicates).
func HasMapWith(preds ...predicate.OsnMap) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newMapStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.PlayerRole) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Match) predicate.Match {
	return predicate.Match(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Match) predicate.Match {
	return predicate.Match(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Match) predicate.Match {
	return predicate.Match(sql.NotPredicates(p))
}
