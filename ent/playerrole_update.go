// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/player"
	"github.com/kevindamm/wits-go/ent/playerrole"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// PlayerRoleUpdate is the builder for updating PlayerRole entities.
type PlayerRoleUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerRoleMutation
}

// Where appends a list predicates to the PlayerRoleUpdate builder.
func (pru *PlayerRoleUpdate) Where(ps ...predicate.PlayerRole) *PlayerRoleUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetMatchID sets the "match_id" field.
func (pru *PlayerRoleUpdate) SetMatchID(i int) *PlayerRoleUpdate {
	pru.mutation.ResetMatchID()
	pru.mutation.SetMatchID(i)
	return pru
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (pru *PlayerRoleUpdate) SetNillableMatchID(i *int) *PlayerRoleUpdate {
	if i != nil {
		pru.SetMatchID(*i)
	}
	return pru
}

// AddMatchID adds i to the "match_id" field.
func (pru *PlayerRoleUpdate) AddMatchID(i int) *PlayerRoleUpdate {
	pru.mutation.AddMatchID(i)
	return pru
}

// SetPlayerID sets the "player_id" field.
func (pru *PlayerRoleUpdate) SetPlayerID(i int) *PlayerRoleUpdate {
	pru.mutation.ResetPlayerID()
	pru.mutation.SetPlayerID(i)
	return pru
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (pru *PlayerRoleUpdate) SetNillablePlayerID(i *int) *PlayerRoleUpdate {
	if i != nil {
		pru.SetPlayerID(*i)
	}
	return pru
}

// AddPlayerID adds i to the "player_id" field.
func (pru *PlayerRoleUpdate) AddPlayerID(i int) *PlayerRoleUpdate {
	pru.mutation.AddPlayerID(i)
	return pru
}

// SetPosition sets the "position" field.
func (pru *PlayerRoleUpdate) SetPosition(i int) *PlayerRoleUpdate {
	pru.mutation.ResetPosition()
	pru.mutation.SetPosition(i)
	return pru
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pru *PlayerRoleUpdate) SetNillablePosition(i *int) *PlayerRoleUpdate {
	if i != nil {
		pru.SetPosition(*i)
	}
	return pru
}

// AddPosition adds i to the "position" field.
func (pru *PlayerRoleUpdate) AddPosition(i int) *PlayerRoleUpdate {
	pru.mutation.AddPosition(i)
	return pru
}

// SetTurnOrder sets the "turn_order" field.
func (pru *PlayerRoleUpdate) SetTurnOrder(i int) *PlayerRoleUpdate {
	pru.mutation.ResetTurnOrder()
	pru.mutation.SetTurnOrder(i)
	return pru
}

// SetNillableTurnOrder sets the "turn_order" field if the given value is not nil.
func (pru *PlayerRoleUpdate) SetNillableTurnOrder(i *int) *PlayerRoleUpdate {
	if i != nil {
		pru.SetTurnOrder(*i)
	}
	return pru
}

// AddTurnOrder adds i to the "turn_order" field.
func (pru *PlayerRoleUpdate) AddTurnOrder(i int) *PlayerRoleUpdate {
	pru.mutation.AddTurnOrder(i)
	return pru
}

// AddMatchIDs adds the "match" edge to the Match entity by IDs.
func (pru *PlayerRoleUpdate) AddMatchIDs(ids ...int) *PlayerRoleUpdate {
	pru.mutation.AddMatchIDs(ids...)
	return pru
}

// AddMatch adds the "match" edges to the Match entity.
func (pru *PlayerRoleUpdate) AddMatch(m ...*Match) *PlayerRoleUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pru.AddMatchIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (pru *PlayerRoleUpdate) AddPlayerIDs(ids ...int) *PlayerRoleUpdate {
	pru.mutation.AddPlayerIDs(ids...)
	return pru
}

// AddPlayers adds the "players" edges to the Player entity.
func (pru *PlayerRoleUpdate) AddPlayers(p ...*Player) *PlayerRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.AddPlayerIDs(ids...)
}

// Mutation returns the PlayerRoleMutation object of the builder.
func (pru *PlayerRoleUpdate) Mutation() *PlayerRoleMutation {
	return pru.mutation
}

// ClearMatch clears all "match" edges to the Match entity.
func (pru *PlayerRoleUpdate) ClearMatch() *PlayerRoleUpdate {
	pru.mutation.ClearMatch()
	return pru
}

// RemoveMatchIDs removes the "match" edge to Match entities by IDs.
func (pru *PlayerRoleUpdate) RemoveMatchIDs(ids ...int) *PlayerRoleUpdate {
	pru.mutation.RemoveMatchIDs(ids...)
	return pru
}

// RemoveMatch removes "match" edges to Match entities.
func (pru *PlayerRoleUpdate) RemoveMatch(m ...*Match) *PlayerRoleUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pru.RemoveMatchIDs(ids...)
}

// ClearPlayers clears all "players" edges to the Player entity.
func (pru *PlayerRoleUpdate) ClearPlayers() *PlayerRoleUpdate {
	pru.mutation.ClearPlayers()
	return pru
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (pru *PlayerRoleUpdate) RemovePlayerIDs(ids ...int) *PlayerRoleUpdate {
	pru.mutation.RemovePlayerIDs(ids...)
	return pru
}

// RemovePlayers removes "players" edges to Player entities.
func (pru *PlayerRoleUpdate) RemovePlayers(p ...*Player) *PlayerRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.RemovePlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PlayerRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PlayerRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PlayerRoleUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PlayerRoleUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PlayerRoleUpdate) check() error {
	if v, ok := pru.mutation.Position(); ok {
		if err := playerrole.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "PlayerRole.position": %w`, err)}
		}
	}
	if v, ok := pru.mutation.TurnOrder(); ok {
		if err := playerrole.TurnOrderValidator(v); err != nil {
			return &ValidationError{Name: "turn_order", err: fmt.Errorf(`ent: validator failed for field "PlayerRole.turn_order": %w`, err)}
		}
	}
	return nil
}

func (pru *PlayerRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playerrole.Table, playerrole.Columns, sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.MatchID(); ok {
		_spec.SetField(playerrole.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedMatchID(); ok {
		_spec.AddField(playerrole.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := pru.mutation.PlayerID(); ok {
		_spec.SetField(playerrole.FieldPlayerID, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedPlayerID(); ok {
		_spec.AddField(playerrole.FieldPlayerID, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Position(); ok {
		_spec.SetField(playerrole.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedPosition(); ok {
		_spec.AddField(playerrole.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pru.mutation.TurnOrder(); ok {
		_spec.SetField(playerrole.FieldTurnOrder, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedTurnOrder(); ok {
		_spec.AddField(playerrole.FieldTurnOrder, field.TypeInt, value)
	}
	if pru.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedMatchIDs(); len(nodes) > 0 && !pru.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !pru.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PlayerRoleUpdateOne is the builder for updating a single PlayerRole entity.
type PlayerRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerRoleMutation
}

// SetMatchID sets the "match_id" field.
func (pruo *PlayerRoleUpdateOne) SetMatchID(i int) *PlayerRoleUpdateOne {
	pruo.mutation.ResetMatchID()
	pruo.mutation.SetMatchID(i)
	return pruo
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (pruo *PlayerRoleUpdateOne) SetNillableMatchID(i *int) *PlayerRoleUpdateOne {
	if i != nil {
		pruo.SetMatchID(*i)
	}
	return pruo
}

// AddMatchID adds i to the "match_id" field.
func (pruo *PlayerRoleUpdateOne) AddMatchID(i int) *PlayerRoleUpdateOne {
	pruo.mutation.AddMatchID(i)
	return pruo
}

// SetPlayerID sets the "player_id" field.
func (pruo *PlayerRoleUpdateOne) SetPlayerID(i int) *PlayerRoleUpdateOne {
	pruo.mutation.ResetPlayerID()
	pruo.mutation.SetPlayerID(i)
	return pruo
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (pruo *PlayerRoleUpdateOne) SetNillablePlayerID(i *int) *PlayerRoleUpdateOne {
	if i != nil {
		pruo.SetPlayerID(*i)
	}
	return pruo
}

// AddPlayerID adds i to the "player_id" field.
func (pruo *PlayerRoleUpdateOne) AddPlayerID(i int) *PlayerRoleUpdateOne {
	pruo.mutation.AddPlayerID(i)
	return pruo
}

// SetPosition sets the "position" field.
func (pruo *PlayerRoleUpdateOne) SetPosition(i int) *PlayerRoleUpdateOne {
	pruo.mutation.ResetPosition()
	pruo.mutation.SetPosition(i)
	return pruo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pruo *PlayerRoleUpdateOne) SetNillablePosition(i *int) *PlayerRoleUpdateOne {
	if i != nil {
		pruo.SetPosition(*i)
	}
	return pruo
}

// AddPosition adds i to the "position" field.
func (pruo *PlayerRoleUpdateOne) AddPosition(i int) *PlayerRoleUpdateOne {
	pruo.mutation.AddPosition(i)
	return pruo
}

// SetTurnOrder sets the "turn_order" field.
func (pruo *PlayerRoleUpdateOne) SetTurnOrder(i int) *PlayerRoleUpdateOne {
	pruo.mutation.ResetTurnOrder()
	pruo.mutation.SetTurnOrder(i)
	return pruo
}

// SetNillableTurnOrder sets the "turn_order" field if the given value is not nil.
func (pruo *PlayerRoleUpdateOne) SetNillableTurnOrder(i *int) *PlayerRoleUpdateOne {
	if i != nil {
		pruo.SetTurnOrder(*i)
	}
	return pruo
}

// AddTurnOrder adds i to the "turn_order" field.
func (pruo *PlayerRoleUpdateOne) AddTurnOrder(i int) *PlayerRoleUpdateOne {
	pruo.mutation.AddTurnOrder(i)
	return pruo
}

// AddMatchIDs adds the "match" edge to the Match entity by IDs.
func (pruo *PlayerRoleUpdateOne) AddMatchIDs(ids ...int) *PlayerRoleUpdateOne {
	pruo.mutation.AddMatchIDs(ids...)
	return pruo
}

// AddMatch adds the "match" edges to the Match entity.
func (pruo *PlayerRoleUpdateOne) AddMatch(m ...*Match) *PlayerRoleUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pruo.AddMatchIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (pruo *PlayerRoleUpdateOne) AddPlayerIDs(ids ...int) *PlayerRoleUpdateOne {
	pruo.mutation.AddPlayerIDs(ids...)
	return pruo
}

// AddPlayers adds the "players" edges to the Player entity.
func (pruo *PlayerRoleUpdateOne) AddPlayers(p ...*Player) *PlayerRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.AddPlayerIDs(ids...)
}

// Mutation returns the PlayerRoleMutation object of the builder.
func (pruo *PlayerRoleUpdateOne) Mutation() *PlayerRoleMutation {
	return pruo.mutation
}

// ClearMatch clears all "match" edges to the Match entity.
func (pruo *PlayerRoleUpdateOne) ClearMatch() *PlayerRoleUpdateOne {
	pruo.mutation.ClearMatch()
	return pruo
}

// RemoveMatchIDs removes the "match" edge to Match entities by IDs.
func (pruo *PlayerRoleUpdateOne) RemoveMatchIDs(ids ...int) *PlayerRoleUpdateOne {
	pruo.mutation.RemoveMatchIDs(ids...)
	return pruo
}

// RemoveMatch removes "match" edges to Match entities.
func (pruo *PlayerRoleUpdateOne) RemoveMatch(m ...*Match) *PlayerRoleUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pruo.RemoveMatchIDs(ids...)
}

// ClearPlayers clears all "players" edges to the Player entity.
func (pruo *PlayerRoleUpdateOne) ClearPlayers() *PlayerRoleUpdateOne {
	pruo.mutation.ClearPlayers()
	return pruo
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (pruo *PlayerRoleUpdateOne) RemovePlayerIDs(ids ...int) *PlayerRoleUpdateOne {
	pruo.mutation.RemovePlayerIDs(ids...)
	return pruo
}

// RemovePlayers removes "players" edges to Player entities.
func (pruo *PlayerRoleUpdateOne) RemovePlayers(p ...*Player) *PlayerRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.RemovePlayerIDs(ids...)
}

// Where appends a list predicates to the PlayerRoleUpdate builder.
func (pruo *PlayerRoleUpdateOne) Where(ps ...predicate.PlayerRole) *PlayerRoleUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PlayerRoleUpdateOne) Select(field string, fields ...string) *PlayerRoleUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PlayerRole entity.
func (pruo *PlayerRoleUpdateOne) Save(ctx context.Context) (*PlayerRole, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PlayerRoleUpdateOne) SaveX(ctx context.Context) *PlayerRole {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PlayerRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PlayerRoleUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PlayerRoleUpdateOne) check() error {
	if v, ok := pruo.mutation.Position(); ok {
		if err := playerrole.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "PlayerRole.position": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.TurnOrder(); ok {
		if err := playerrole.TurnOrderValidator(v); err != nil {
			return &ValidationError{Name: "turn_order", err: fmt.Errorf(`ent: validator failed for field "PlayerRole.turn_order": %w`, err)}
		}
	}
	return nil
}

func (pruo *PlayerRoleUpdateOne) sqlSave(ctx context.Context) (_node *PlayerRole, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playerrole.Table, playerrole.Columns, sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerrole.FieldID)
		for _, f := range fields {
			if !playerrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playerrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.MatchID(); ok {
		_spec.SetField(playerrole.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedMatchID(); ok {
		_spec.AddField(playerrole.FieldMatchID, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.PlayerID(); ok {
		_spec.SetField(playerrole.FieldPlayerID, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedPlayerID(); ok {
		_spec.AddField(playerrole.FieldPlayerID, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Position(); ok {
		_spec.SetField(playerrole.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedPosition(); ok {
		_spec.AddField(playerrole.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.TurnOrder(); ok {
		_spec.SetField(playerrole.FieldTurnOrder, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedTurnOrder(); ok {
		_spec.AddField(playerrole.FieldTurnOrder, field.TypeInt, value)
	}
	if pruo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedMatchIDs(); len(nodes) > 0 && !pruo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !pruo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerRole{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
