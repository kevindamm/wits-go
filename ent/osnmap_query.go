// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/osnmap"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// OsnMapQuery is the builder for querying OsnMap entities.
type OsnMapQuery struct {
	config
	ctx         *QueryContext
	order       []osnmap.OrderOption
	inters      []Interceptor
	predicates  []predicate.OsnMap
	withMatches *MatchQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OsnMapQuery builder.
func (omq *OsnMapQuery) Where(ps ...predicate.OsnMap) *OsnMapQuery {
	omq.predicates = append(omq.predicates, ps...)
	return omq
}

// Limit the number of records to be returned by this query.
func (omq *OsnMapQuery) Limit(limit int) *OsnMapQuery {
	omq.ctx.Limit = &limit
	return omq
}

// Offset to start from.
func (omq *OsnMapQuery) Offset(offset int) *OsnMapQuery {
	omq.ctx.Offset = &offset
	return omq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (omq *OsnMapQuery) Unique(unique bool) *OsnMapQuery {
	omq.ctx.Unique = &unique
	return omq
}

// Order specifies how the records should be ordered.
func (omq *OsnMapQuery) Order(o ...osnmap.OrderOption) *OsnMapQuery {
	omq.order = append(omq.order, o...)
	return omq
}

// QueryMatches chains the current query on the "matches" edge.
func (omq *OsnMapQuery) QueryMatches() *MatchQuery {
	query := (&MatchClient{config: omq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := omq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := omq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(osnmap.Table, osnmap.FieldID, selector),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, osnmap.MatchesTable, osnmap.MatchesColumn),
		)
		fromU = sqlgraph.SetNeighbors(omq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OsnMap entity from the query.
// Returns a *NotFoundError when no OsnMap was found.
func (omq *OsnMapQuery) First(ctx context.Context) (*OsnMap, error) {
	nodes, err := omq.Limit(1).All(setContextOp(ctx, omq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{osnmap.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (omq *OsnMapQuery) FirstX(ctx context.Context) *OsnMap {
	node, err := omq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OsnMap ID from the query.
// Returns a *NotFoundError when no OsnMap ID was found.
func (omq *OsnMapQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = omq.Limit(1).IDs(setContextOp(ctx, omq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{osnmap.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (omq *OsnMapQuery) FirstIDX(ctx context.Context) int {
	id, err := omq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OsnMap entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OsnMap entity is found.
// Returns a *NotFoundError when no OsnMap entities are found.
func (omq *OsnMapQuery) Only(ctx context.Context) (*OsnMap, error) {
	nodes, err := omq.Limit(2).All(setContextOp(ctx, omq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{osnmap.Label}
	default:
		return nil, &NotSingularError{osnmap.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (omq *OsnMapQuery) OnlyX(ctx context.Context) *OsnMap {
	node, err := omq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OsnMap ID in the query.
// Returns a *NotSingularError when more than one OsnMap ID is found.
// Returns a *NotFoundError when no entities are found.
func (omq *OsnMapQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = omq.Limit(2).IDs(setContextOp(ctx, omq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{osnmap.Label}
	default:
		err = &NotSingularError{osnmap.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (omq *OsnMapQuery) OnlyIDX(ctx context.Context) int {
	id, err := omq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OsnMaps.
func (omq *OsnMapQuery) All(ctx context.Context) ([]*OsnMap, error) {
	ctx = setContextOp(ctx, omq.ctx, ent.OpQueryAll)
	if err := omq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OsnMap, *OsnMapQuery]()
	return withInterceptors[[]*OsnMap](ctx, omq, qr, omq.inters)
}

// AllX is like All, but panics if an error occurs.
func (omq *OsnMapQuery) AllX(ctx context.Context) []*OsnMap {
	nodes, err := omq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OsnMap IDs.
func (omq *OsnMapQuery) IDs(ctx context.Context) (ids []int, err error) {
	if omq.ctx.Unique == nil && omq.path != nil {
		omq.Unique(true)
	}
	ctx = setContextOp(ctx, omq.ctx, ent.OpQueryIDs)
	if err = omq.Select(osnmap.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (omq *OsnMapQuery) IDsX(ctx context.Context) []int {
	ids, err := omq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (omq *OsnMapQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, omq.ctx, ent.OpQueryCount)
	if err := omq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, omq, querierCount[*OsnMapQuery](), omq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (omq *OsnMapQuery) CountX(ctx context.Context) int {
	count, err := omq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (omq *OsnMapQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, omq.ctx, ent.OpQueryExist)
	switch _, err := omq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (omq *OsnMapQuery) ExistX(ctx context.Context) bool {
	exist, err := omq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OsnMapQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (omq *OsnMapQuery) Clone() *OsnMapQuery {
	if omq == nil {
		return nil
	}
	return &OsnMapQuery{
		config:      omq.config,
		ctx:         omq.ctx.Clone(),
		order:       append([]osnmap.OrderOption{}, omq.order...),
		inters:      append([]Interceptor{}, omq.inters...),
		predicates:  append([]predicate.OsnMap{}, omq.predicates...),
		withMatches: omq.withMatches.Clone(),
		// clone intermediate query.
		sql:  omq.sql.Clone(),
		path: omq.path,
	}
}

// WithMatches tells the query-builder to eager-load the nodes that are connected to
// the "matches" edge. The optional arguments are used to configure the query builder of the edge.
func (omq *OsnMapQuery) WithMatches(opts ...func(*MatchQuery)) *OsnMapQuery {
	query := (&MatchClient{config: omq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	omq.withMatches = query
	return omq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OsnMap.Query().
//		GroupBy(osnmap.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (omq *OsnMapQuery) GroupBy(field string, fields ...string) *OsnMapGroupBy {
	omq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OsnMapGroupBy{build: omq}
	grbuild.flds = &omq.ctx.Fields
	grbuild.label = osnmap.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.OsnMap.Query().
//		Select(osnmap.FieldName).
//		Scan(ctx, &v)
func (omq *OsnMapQuery) Select(fields ...string) *OsnMapSelect {
	omq.ctx.Fields = append(omq.ctx.Fields, fields...)
	sbuild := &OsnMapSelect{OsnMapQuery: omq}
	sbuild.label = osnmap.Label
	sbuild.flds, sbuild.scan = &omq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OsnMapSelect configured with the given aggregations.
func (omq *OsnMapQuery) Aggregate(fns ...AggregateFunc) *OsnMapSelect {
	return omq.Select().Aggregate(fns...)
}

func (omq *OsnMapQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range omq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, omq); err != nil {
				return err
			}
		}
	}
	for _, f := range omq.ctx.Fields {
		if !osnmap.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if omq.path != nil {
		prev, err := omq.path(ctx)
		if err != nil {
			return err
		}
		omq.sql = prev
	}
	return nil
}

func (omq *OsnMapQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OsnMap, error) {
	var (
		nodes       = []*OsnMap{}
		_spec       = omq.querySpec()
		loadedTypes = [1]bool{
			omq.withMatches != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OsnMap).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OsnMap{config: omq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, omq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := omq.withMatches; query != nil {
		if err := omq.loadMatches(ctx, query, nodes,
			func(n *OsnMap) { n.Edges.Matches = []*Match{} },
			func(n *OsnMap, e *Match) { n.Edges.Matches = append(n.Edges.Matches, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (omq *OsnMapQuery) loadMatches(ctx context.Context, query *MatchQuery, nodes []*OsnMap, init func(*OsnMap), assign func(*OsnMap, *Match)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OsnMap)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Match(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(osnmap.MatchesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.osn_map_matches
		if fk == nil {
			return fmt.Errorf(`foreign-key "osn_map_matches" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "osn_map_matches" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (omq *OsnMapQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := omq.querySpec()
	_spec.Node.Columns = omq.ctx.Fields
	if len(omq.ctx.Fields) > 0 {
		_spec.Unique = omq.ctx.Unique != nil && *omq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, omq.driver, _spec)
}

func (omq *OsnMapQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(osnmap.Table, osnmap.Columns, sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt))
	_spec.From = omq.sql
	if unique := omq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if omq.path != nil {
		_spec.Unique = true
	}
	if fields := omq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osnmap.FieldID)
		for i := range fields {
			if fields[i] != osnmap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := omq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := omq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := omq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := omq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (omq *OsnMapQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(omq.driver.Dialect())
	t1 := builder.Table(osnmap.Table)
	columns := omq.ctx.Fields
	if len(columns) == 0 {
		columns = osnmap.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if omq.sql != nil {
		selector = omq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if omq.ctx.Unique != nil && *omq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range omq.predicates {
		p(selector)
	}
	for _, p := range omq.order {
		p(selector)
	}
	if offset := omq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := omq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OsnMapGroupBy is the group-by builder for OsnMap entities.
type OsnMapGroupBy struct {
	selector
	build *OsnMapQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (omgb *OsnMapGroupBy) Aggregate(fns ...AggregateFunc) *OsnMapGroupBy {
	omgb.fns = append(omgb.fns, fns...)
	return omgb
}

// Scan applies the selector query and scans the result into the given value.
func (omgb *OsnMapGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, omgb.build.ctx, ent.OpQueryGroupBy)
	if err := omgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OsnMapQuery, *OsnMapGroupBy](ctx, omgb.build, omgb, omgb.build.inters, v)
}

func (omgb *OsnMapGroupBy) sqlScan(ctx context.Context, root *OsnMapQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(omgb.fns))
	for _, fn := range omgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*omgb.flds)+len(omgb.fns))
		for _, f := range *omgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*omgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := omgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OsnMapSelect is the builder for selecting fields of OsnMap entities.
type OsnMapSelect struct {
	*OsnMapQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oms *OsnMapSelect) Aggregate(fns ...AggregateFunc) *OsnMapSelect {
	oms.fns = append(oms.fns, fns...)
	return oms
}

// Scan applies the selector query and scans the result into the given value.
func (oms *OsnMapSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oms.ctx, ent.OpQuerySelect)
	if err := oms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OsnMapQuery, *OsnMapSelect](ctx, oms.OsnMapQuery, oms, oms.inters, v)
}

func (oms *OsnMapSelect) sqlScan(ctx context.Context, root *OsnMapQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oms.fns))
	for _, fn := range oms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
