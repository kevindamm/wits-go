// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/match"
	"github.com/kevindamm/wits-go/ent/player"
	"github.com/kevindamm/wits-go/ent/playerrole"
)

// PlayerRoleCreate is the builder for creating a PlayerRole entity.
type PlayerRoleCreate struct {
	config
	mutation *PlayerRoleMutation
	hooks    []Hook
}

// SetMatchID sets the "match_id" field.
func (prc *PlayerRoleCreate) SetMatchID(i int) *PlayerRoleCreate {
	prc.mutation.SetMatchID(i)
	return prc
}

// SetPlayerID sets the "player_id" field.
func (prc *PlayerRoleCreate) SetPlayerID(i int) *PlayerRoleCreate {
	prc.mutation.SetPlayerID(i)
	return prc
}

// SetPosition sets the "position" field.
func (prc *PlayerRoleCreate) SetPosition(i int) *PlayerRoleCreate {
	prc.mutation.SetPosition(i)
	return prc
}

// SetTurnOrder sets the "turn_order" field.
func (prc *PlayerRoleCreate) SetTurnOrder(i int) *PlayerRoleCreate {
	prc.mutation.SetTurnOrder(i)
	return prc
}

// AddMatchIDs adds the "match" edge to the Match entity by IDs.
func (prc *PlayerRoleCreate) AddMatchIDs(ids ...int) *PlayerRoleCreate {
	prc.mutation.AddMatchIDs(ids...)
	return prc
}

// AddMatch adds the "match" edges to the Match entity.
func (prc *PlayerRoleCreate) AddMatch(m ...*Match) *PlayerRoleCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return prc.AddMatchIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (prc *PlayerRoleCreate) AddPlayerIDs(ids ...int) *PlayerRoleCreate {
	prc.mutation.AddPlayerIDs(ids...)
	return prc
}

// AddPlayers adds the "players" edges to the Player entity.
func (prc *PlayerRoleCreate) AddPlayers(p ...*Player) *PlayerRoleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prc.AddPlayerIDs(ids...)
}

// Mutation returns the PlayerRoleMutation object of the builder.
func (prc *PlayerRoleCreate) Mutation() *PlayerRoleMutation {
	return prc.mutation
}

// Save creates the PlayerRole in the database.
func (prc *PlayerRoleCreate) Save(ctx context.Context) (*PlayerRole, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PlayerRoleCreate) SaveX(ctx context.Context) *PlayerRole {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PlayerRoleCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PlayerRoleCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PlayerRoleCreate) check() error {
	if _, ok := prc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match_id", err: errors.New(`ent: missing required field "PlayerRole.match_id"`)}
	}
	if _, ok := prc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player_id", err: errors.New(`ent: missing required field "PlayerRole.player_id"`)}
	}
	if _, ok := prc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "PlayerRole.position"`)}
	}
	if v, ok := prc.mutation.Position(); ok {
		if err := playerrole.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "PlayerRole.position": %w`, err)}
		}
	}
	if _, ok := prc.mutation.TurnOrder(); !ok {
		return &ValidationError{Name: "turn_order", err: errors.New(`ent: missing required field "PlayerRole.turn_order"`)}
	}
	if v, ok := prc.mutation.TurnOrder(); ok {
		if err := playerrole.TurnOrderValidator(v); err != nil {
			return &ValidationError{Name: "turn_order", err: fmt.Errorf(`ent: validator failed for field "PlayerRole.turn_order": %w`, err)}
		}
	}
	if len(prc.mutation.MatchIDs()) == 0 {
		return &ValidationError{Name: "match", err: errors.New(`ent: missing required edge "PlayerRole.match"`)}
	}
	if len(prc.mutation.PlayersIDs()) == 0 {
		return &ValidationError{Name: "players", err: errors.New(`ent: missing required edge "PlayerRole.players"`)}
	}
	return nil
}

func (prc *PlayerRoleCreate) sqlSave(ctx context.Context) (*PlayerRole, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PlayerRoleCreate) createSpec() (*PlayerRole, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayerRole{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(playerrole.Table, sqlgraph.NewFieldSpec(playerrole.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.MatchID(); ok {
		_spec.SetField(playerrole.FieldMatchID, field.TypeInt, value)
		_node.MatchID = value
	}
	if value, ok := prc.mutation.PlayerID(); ok {
		_spec.SetField(playerrole.FieldPlayerID, field.TypeInt, value)
		_node.PlayerID = value
	}
	if value, ok := prc.mutation.Position(); ok {
		_spec.SetField(playerrole.FieldPosition, field.TypeInt, value)
		_node.Position = value
	}
	if value, ok := prc.mutation.TurnOrder(); ok {
		_spec.SetField(playerrole.FieldTurnOrder, field.TypeInt, value)
		_node.TurnOrder = value
	}
	if nodes := prc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.MatchTable,
			Columns: playerrole.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playerrole.PlayersTable,
			Columns: playerrole.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerRoleCreateBulk is the builder for creating many PlayerRole entities in bulk.
type PlayerRoleCreateBulk struct {
	config
	err      error
	builders []*PlayerRoleCreate
}

// Save creates the PlayerRole entities in the database.
func (prcb *PlayerRoleCreateBulk) Save(ctx context.Context) ([]*PlayerRole, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PlayerRole, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PlayerRoleCreateBulk) SaveX(ctx context.Context) []*PlayerRole {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PlayerRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PlayerRoleCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
