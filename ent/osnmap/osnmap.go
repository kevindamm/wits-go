// Code generated by ent, DO NOT EDIT.

package osnmap

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the osnmap type in the database.
	Label = "osn_map"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldShortname holds the string denoting the shortname field in the database.
	FieldShortname = "shortname"
	// FieldRoleCount holds the string denoting the role_count field in the database.
	FieldRoleCount = "role_count"
	// EdgeMatches holds the string denoting the matches edge name in mutations.
	EdgeMatches = "matches"
	// Table holds the table name of the osnmap in the database.
	Table = "osn_maps"
	// MatchesTable is the table that holds the matches relation/edge.
	MatchesTable = "matches"
	// MatchesInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchesInverseTable = "matches"
	// MatchesColumn is the table column denoting the matches relation/edge.
	MatchesColumn = "osn_map_matches"
)

// Columns holds all SQL columns for osnmap fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldShortname,
	FieldRoleCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RoleCountValidator is a validator for the "role_count" field. It is called by the builders before save.
	RoleCountValidator func(int) error
)

// OrderOption defines the ordering options for the OsnMap queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByShortname orders the results by the shortname field.
func ByShortname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortname, opts...).ToFunc()
}

// ByRoleCount orders the results by the role_count field.
func ByRoleCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleCount, opts...).ToFunc()
}

// ByMatchesCount orders the results by matches count.
func ByMatchesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchesStep(), opts...)
	}
}

// ByMatches orders the results by matches terms.
func ByMatches(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMatchesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchesTable, MatchesColumn),
	)
}
