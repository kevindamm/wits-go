// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevindamm/wits-go/ent/osnmap"
)

// OsnMap is the model entity for the OsnMap schema.
type OsnMap struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Shortname holds the value of the "shortname" field.
	Shortname string `json:"shortname,omitempty"`
	// RoleCount holds the value of the "role_count" field.
	RoleCount int `json:"role_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OsnMapQuery when eager-loading is set.
	Edges        OsnMapEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OsnMapEdges holds the relations/edges for other nodes in the graph.
type OsnMapEdges struct {
	// Matches holds the value of the matches edge.
	Matches []*Match `json:"matches,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MatchesOrErr returns the Matches value or an error if the edge
// was not loaded in eager-loading.
func (e OsnMapEdges) MatchesOrErr() ([]*Match, error) {
	if e.loadedTypes[0] {
		return e.Matches, nil
	}
	return nil, &NotLoadedError{edge: "matches"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OsnMap) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case osnmap.FieldID, osnmap.FieldRoleCount:
			values[i] = new(sql.NullInt64)
		case osnmap.FieldName, osnmap.FieldShortname:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OsnMap fields.
func (om *OsnMap) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case osnmap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			om.ID = int(value.Int64)
		case osnmap.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				om.Name = value.String
			}
		case osnmap.FieldShortname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shortname", values[i])
			} else if value.Valid {
				om.Shortname = value.String
			}
		case osnmap.FieldRoleCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_count", values[i])
			} else if value.Valid {
				om.RoleCount = int(value.Int64)
			}
		default:
			om.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OsnMap.
// This includes values selected through modifiers, order, etc.
func (om *OsnMap) Value(name string) (ent.Value, error) {
	return om.selectValues.Get(name)
}

// QueryMatches queries the "matches" edge of the OsnMap entity.
func (om *OsnMap) QueryMatches() *MatchQuery {
	return NewOsnMapClient(om.config).QueryMatches(om)
}

// Update returns a builder for updating this OsnMap.
// Note that you need to call OsnMap.Unwrap() before calling this method if this OsnMap
// was returned from a transaction, and the transaction was committed or rolled back.
func (om *OsnMap) Update() *OsnMapUpdateOne {
	return NewOsnMapClient(om.config).UpdateOne(om)
}

// Unwrap unwraps the OsnMap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (om *OsnMap) Unwrap() *OsnMap {
	_tx, ok := om.config.driver.(*txDriver)
	if !ok {
		panic("ent: OsnMap is not a transactional entity")
	}
	om.config.driver = _tx.drv
	return om
}

// String implements the fmt.Stringer.
func (om *OsnMap) String() string {
	var builder strings.Builder
	builder.WriteString("OsnMap(")
	builder.WriteString(fmt.Sprintf("id=%v, ", om.ID))
	builder.WriteString("name=")
	builder.WriteString(om.Name)
	builder.WriteString(", ")
	builder.WriteString("shortname=")
	builder.WriteString(om.Shortname)
	builder.WriteString(", ")
	builder.WriteString("role_count=")
	builder.WriteString(fmt.Sprintf("%v", om.RoleCount))
	builder.WriteByte(')')
	return builder.String()
}

// OsnMaps is a parsable slice of OsnMap.
type OsnMaps []*OsnMap
