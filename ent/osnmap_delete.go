// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/wits-go/ent/osnmap"
	"github.com/kevindamm/wits-go/ent/predicate"
)

// OsnMapDelete is the builder for deleting a OsnMap entity.
type OsnMapDelete struct {
	config
	hooks    []Hook
	mutation *OsnMapMutation
}

// Where appends a list predicates to the OsnMapDelete builder.
func (omd *OsnMapDelete) Where(ps ...predicate.OsnMap) *OsnMapDelete {
	omd.mutation.Where(ps...)
	return omd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (omd *OsnMapDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, omd.sqlExec, omd.mutation, omd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (omd *OsnMapDelete) ExecX(ctx context.Context) int {
	n, err := omd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (omd *OsnMapDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(osnmap.Table, sqlgraph.NewFieldSpec(osnmap.FieldID, field.TypeInt))
	if ps := omd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, omd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	omd.mutation.done = true
	return affected, err
}

// OsnMapDeleteOne is the builder for deleting a single OsnMap entity.
type OsnMapDeleteOne struct {
	omd *OsnMapDelete
}

// Where appends a list predicates to the OsnMapDelete builder.
func (omdo *OsnMapDeleteOne) Where(ps ...predicate.OsnMap) *OsnMapDeleteOne {
	omdo.omd.mutation.Where(ps...)
	return omdo
}

// Exec executes the deletion query.
func (omdo *OsnMapDeleteOne) Exec(ctx context.Context) error {
	n, err := omdo.omd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{osnmap.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (omdo *OsnMapDeleteOne) ExecX(ctx context.Context) {
	if err := omdo.Exec(ctx); err != nil {
		panic(err)
	}
}
